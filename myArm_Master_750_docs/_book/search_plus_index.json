{"./":{"url":"./","title":"Introduction","keywords":"","body":"myArm Master 750 通用型智能六自由度机械臂 核心文档 本文档包含从产品简介、详细的技术参数到用户须知和首次安装指导的全面信息。我们将深入解释myArm M750机械臂的基础功能，提供软件开发指南，并展示成功的应用案例，帮助您了解如何将 myArm M750 有效整合进各种应用中。此外，我们还提供了丰富的支持与服务信息，确保您在遇到任何技术挑战时能够获得必要的帮助。 gitbook-en 英文版本: https://docs.elephantrobotics.com/docs/myArm_Master_750-en/ gitbook-cn 中文版本: https://docs.elephantrobotics.com/docs/myArm_Master_750-cn/ 文档说明 根据您的需求以及 myArm M750 应用程序开发的专业水平，您可以选择从头到尾遵循该顺序，或将其用作独立参考。您可以随时使用左侧的侧边栏导航跳转到任何部分，全文共分为以下五大板块： 产品信息 产品信息板块将为您提供机械臂的基本概述，包括设计意图、主要功能和应用场景，帮助您快速了解产品的基本特性和使用环境。此外，这一部分将详细介绍产品的应用实例和支持的扩展开发，为您提供必要的开发指南和资源。文末将给出相关购买链接和渠道，方便您进行购买。 产品参数 产品参数部分将向您展示包括机器规格、控制核心参数、结构尺寸和电气特性等详细的技术规格，这些信息对于理解产品的技术标准和性能指标至关重要。此外，还将提供关于机械臂工作范围和精确度的笛卡尔坐标系信息，为想要进行精密操作的用户提供参考。 功能与应用 功能与应用板块详细介绍了机械臂的基础功能和软件使用方法，包括系统使用说明和固件功能。软件开发指南提供了基于不同开发环境的指导，如Python和ROS，支持技术开发者进行应用扩展。通过展示成功的应用案例和提供配套资源，为您提供实践参考和必要的支持材料，以便更深入地了解和使用产品。 支持与服务 支持与服务板块将为您提供全面的故障排除指南和购买后的服务信息，如保修和服务条款，帮助您在遇到问题时能够快速解决，并确保您了解购买后的权利和义务。此外，'关于我们'部分加强了用户对myArm 系列产品设计及制造商的了解，旨在建立信任和品牌忠诚。 致谢 我们非常感谢您花时间阅读 myArm M750 用户手册。我们希望本文档能够帮助您更好地了解并有效使用这款机器人，从而激发您的创造力。如果您有任何疑问或需要进一步帮助，请随时联系我们的客户支持团队。我们期待看到您使用 myArm M750 完成创新项目，并欢迎您加入我们快速发展的开发者社区。 文档目录 Summary 产品信息 1 产品简介 2 产品参数 2.1 机器规格参数 2.2 控制核心参数 2.3 结构尺寸参数 2.4 电气特性参数 2.5 笛卡尔坐标系 基础设置 3 用户须知 3.1 安全须知 3.2 运输和储存 3.3 维护和保养 4 首次安装 4.1 产品标准清单 4.2 产品开箱指南 4.3 开机检测指南 1 结构安装固定 2 外部线缆连接 3 开机状态显示 功能与应用 5 基础功能 5.1 系统（功能）使用说明 Minirobot 1 Minirobot 使用指南 2 拖动示教 3 零位校准 4 通信转发 5 状态信息 6 烧录功能 6 软件开发指南 6.1 基于 python 开发使用 下载与环境搭建 API 相关案例 6.2 基于 ROS1 开发使用 ROS安装 ROS工作空间代码和使用 ROS常用工具命令 ROS架构和通信 6.3 基于 ROS2 开发使用 6.4 基于通信协议包开发 7 成功案例 支持与服务 8 关于我们 致谢 致谢 "},"2-ProductInformation/1-ProductIntroduction/1-ProductIntroduction.html":{"url":"2-ProductInformation/1-ProductIntroduction/1-ProductIntroduction.html","title":"1 产品简介","keywords":"","body":"1. 产品概述 myArm Master 750 通用型智能六自由度机械臂 产品简介 myArm Master 750 六自由度运动控制验证的装置 是一款通用型智能机械臂，配备了先进的 Master 主控器。作为一款用于运动控制验证的装置，它适用于多种需要复杂运动控制、精准定位和高度可编程性的场景，可实现端到端数据训练与复现、研究与商业展示。 机械臂具有六自由度的精准操作能力，专为教育和研究领域设计，适合机器学习、AI 和基于视觉等任务。机械臂臂展为 750mm，标准负载为 500g，在特定条件下最大可承载 1kg，能够满足多种科研和实验需求。 设计理念 myArm M750 通用型智能机械臂的设计理念源于对当前科技教育和研究领域需求的深刻理解。机器学习、人工智能等高科技领域快速发展，要求实验设备不仅要有通用功能性，还需具备灵活性和精确性。设计旨在满足这些复杂需求，提供一个既灵活精确又能适应各种应用场景的解决方案。 设计目标 设计目标 功能实现 通用多功能平台 myArm M750 适用于教育、研究和商业展示等多种应用场景。其六自由度和 750mm 臂展支持在各种工作环境中执行复杂的运动控制，如精准定位和路径规划。 科研和教育支持 myArm M750 适合机器学习和人工智能研究，能执行高精度的实验和技术演示。它支持端到端数据训练与复现，以及基础的视觉任务，是实验室中的理想设备。 可编程性与扩展性 myArm M750 的高度可编程性允许用户根据新兴技术自定义和编程，满足未来的技术需求，实现优化操作和实验结果。 技术创新与知识传播 在商业展示中，myArm M750 可作为展示最新科技成果的平台载体，旨在提高公众对科技的理解和兴趣，推动科技创新向商业化转化。 产品特点 | 特征描述 | 内容 | |--------------------------|-------------------------------------------------------------------------------| | 6 自由度模块化设计 | 灵活性与可扩展性的完美结合，适合复杂操作。 | | 工业级数字伺服电机 | 保证机械臂的精准控制和长期稳定运行。 | | 高精度编码器 | 提供精确的位置、速度和加速度信息，优化性能。 | | 支持多种开发环境 | 包括 Python 和 ROS，满足不同开发需求。 | | 支持本地化拖动示教 | 直观的学习和操作方式，不依赖外部设备。 | | 高速数据接口 | 开放多种状态接口，支持复杂应用。 | | 定制化嵌入式软件 | 提供用户友好的操作界面，简化复杂任务。 | | 内置 2 寸显示屏 | 实时显示机械臂状态和操作反馈。 | | 多连接方式支持 | 灵活的场景应用，无缝接入现有系统。 | | 中心对称式构型 | 确保均衡稳定，提高操作精度。 | 产品价值 增强实验和研究能力 myArm M750 为研究人员提供了一个能够进行高精度操作的平台，帮助进行复杂数据分析和算法验证。 提高教育质量 在教育环境中，该设备能够提供实践操作的机会，帮助学生更好地理解理论，并培养实际操作能力。 增加商业和展示机会 M750 不仅限于实验室使用，其在技术展会和公众演示中的应用，能够吸引观众和潜在客户，增强技术展示的互动性和吸引力。 行业贡献 促进 STEM 教育 通过提供高级的教学工具，激发学生对科学、技术、工程和数学领域的兴趣，培养未来的创新者。 推动技术采用 通过提供易于使用且高度灵活的机器人平台，降低技术门槛，使更多机构能够接触和利用先进的机器人技术。 激发创新和个人发展 为开发者和工程师提供一个开放的平台，支持跨学科的学习和创新，为机器人技术及相关领域的未来发展培养关键人才。 2. 产品应用 用户群体 高等教育机构和研究实验室 myArm M750 是专为高精度实验和技术演示而设计的教学与科研工具。它能有效支持复杂数据分析、算法开发和验证活动，显著提升研究质量和教育效果。 技术开发者和工程师 支持 Python 和 ROS 两种开发环境，myArm M750 适合需要个性化编程和系统集成的专业人员。其模块化设计和高度可编程性使其成为开发和测试新控制算法或机器人应用的理想平台。 商业展示和公共展览组织者 myArm M750 以其精密操作展示优势，成为科技展示和产品演示的首选设备。动态演示不仅吸引观众，还增强参与感，有效推广科技创新和产品。 创新企业和初创公司 myArm Master 750 为寻求集成尖端机器人技术以提升产品功能或优化生产流程的企业提供强大支持。其出色的性能和适应性使其成为探索新技术和解决方案的理想选择。 应用场景 用户群体 应用场景 优势目标 教育领域教师和学生 - STEM 教育- 机器人项目- 跨学科研究项目- 机器人学科教具 - 提高学生对科技的兴趣- 增强动手能力和解决问题的能力- 促进创新思维和团队合作- 作为机器人结构设计、电路设计和力学分析等学科建设工具 技术开发者和工程师 - 原型开发- 实验研究- 算法测试和验证- 机器人运动学验证- 机器人复合场景应用验证 - 加速研究进展- 连接理论与实践- 推进技术创新- 验证机器人运动学和复合场景应用 商业演示和营销专业人士 - 展览展示- 技术演示- 品牌推广 - 吸引潜在客户和投资者- 展示公司技术实力和创新产品- 提升品牌影响力 工程师和技术开发人员 - 机器人运动学验证- 机器人远程遥控场景探索和开发- 机器学习、AI 和基于视觉任务 - 进行 C650 的验证机器操作- 探索和开发机器人远程遥控应用- 扩展机器人技术应用和场景的实用性 周边配件 多样化的周边配件为 myArm M750 机械臂提供了广泛的功能扩展，使其适用于各种工业、研究和教育场景。用户通过结合这些配件，可以显著提高 myArm M750 机械臂的灵活性和实用性。 myCobot 自适应夹爪 夹爪可自动调节以适配不同形状和大小的物体，专为执行复杂的抓取任务而设计，如处理不规则形状或易碎物品。其卓越的灵活性和适应性显著增强了机械臂的操作效能和应用广度。升级版自适应夹爪具备更强的夹持力，并兼容多种编程环境，适配多种工业级机械臂。 myCobot 平行夹爪 专为需要精确控制的任务设计，如电子设备的组装和测试。夹爪的两个指尖平行移动，确保在抓取过程中物体稳定，理想用于处理均匀形状的物体。其结构紧凑，多个连接孔设计满足不同的安装需求，同时支持 IO 和串口控制，兼容各种工业级机械臂。 myCobot 柔性夹爪 柔性夹爪适用于处理敏感或易损的物体，其夹持面柔软且有弹性，能有效减少对物体的压力，降低损坏风险。适合抓取玻璃、塑料或瓷器等易碎物品。指尖由橡胶制成，利用气压变形进行抓取，广泛应用于各种自动化和机器人领域，因其柔性、适应性和高效性而备受青睐。 myCobot 垂直吸泵 V2.0 垂直吸泵 V2.0 是升级版的真空吸附系统，用于垂直提升光滑表面物体，如金属板、玻璃或塑料。新版本具有更强的吸附能力和更高的耐用性，特别适用于快速和重复的搬运作业。 myCobot 双头吸泵 双头吸泵配备两个独立吸盘，使机械臂能同时搬运两个物体或提供更大的稳定性和支持力，增强在装配线任务或多部件同时处理的应用中的效率。 myCobot 摄像头法兰 V2.0 摄像头法兰 V2.0 使标准摄像头能够安装至机械臂上，为机械臂提供必要的视觉反馈，特别适用于需要视觉识别的任务，如质量检查、颜色分拣或精确放置。 myCobot 手机支架 此配件让 myCobot 机械臂能够持有并操作智能手机或类似设备，适用于自动化测试手机应用、进行教育演示或使用手机摄像头进行特定场景下的操作。 3. 支持的扩展开发 myArm 系列机械臂在教育和科研领域中极具价值，特别是在 Python 和 ROS（Robot Operating System）这两个广泛使用的开发环境中。这些环境提供了强大的支持，使得 myArm 系列产品能够广泛应用于机器学习、人工智能研究、复杂运动控制以及视觉处理任务中。 Python - 提供关节角度控制、伺服电机控制、伺服电机参数配置、笛卡尔坐标系控制等接口。- 支持更高级的运动控制和精准定位，适合进行复杂的机器人学研究和应用开发。- 驱动库可通过 PyPI 下载安装，提供全面的接口支持，适合需求更为复杂的教育或研究项目。 ROS - 支持 MoveIt 基本功能，如键盘控制和基础路径规划，提供 ROS1 和 ROS2 双版本支持。- 通过 RVIZ 仿真环境加强实时机械臂显示和状态信息采集，适合进行更高级的机器人路径规划和操作研究。 硬件接口 - 包括 IO、USB 等，方便连接各种传感器和执行器。 软件库 - 提供丰富的开源库和 API 来简化开发过程。 系统兼容性 - 兼容 Windows、Linux、MacOS，适应多种开发环境。 4. 购买地址 如果您有兴趣购买该设备，请点击下面的链接：淘宝：https://shop504055678.taobao.comShopify：https://shop.elephantrobotics.com/速卖通：https://elephantrobotics.aliexpress.com/store/1101941423 下一章 → "},"2-ProductInformation/2-ProductParameters/ProductParameters.html":{"url":"2-ProductInformation/2-ProductParameters/ProductParameters.html","title":"2 产品参数","keywords":"","body":"机器人参数说明 第一章中，我们探讨了产品的卖点及其设计理念，为您提供了对产品高层次理解的全景视角。现在，让我们进入第二章——机器人参数说明。这一章节将是您理解产品技术细节的关键。详细了解这些技术参数，不仅可以帮助您充分认识到我们产品的先进性和实用性，而且还能够确保您能够更有效地利用这些技术来满足您的具体需求。 1 产品规格参数 1.1 机器参数 --> 规格 参数 型号 myArm M750 DOF 6+1 水平伸展范围 750 总跨度 1500mm 自重 3.2kg 电源规格 24V5A 重复定位精度 ±1mm 精确度 5 - 8mm 工作载荷 额定500g，峰值1Kg 舵机数量 8 舵机类型 工业级高精度数字伺服电机 旋转能力 +/- 180° 末端执行器 平行夹爪 ，可选摄像头适配 USB 连接 Type-C Atom 末端 5*5 LED灯矩阵 通讯帧率 >50Hz 1.2 软件基本功能支持 功能/开发环境 使用情况 关节运动 支持 笛卡尔运动 支持 无线控制 支持 紧急停止 支持 Windows 支持 Linux 支持 MAC 支持 ROS 支持 Python 支持 C++ 支持 C# 支持 JavaScript 支持 myblockly 支持 Arduino 支持 mystudio 支持 串口控制协议 支持 TCP/IP 支持 MODBUS 支持 1.3 扩展开发功能 扩展接口 扩展开发方式 ROS Python 2 控制核心参数 2.1 主控制器规格表 指标 参数 主控制 M5Stack-basic 主控型号 ESP32 CPU 240MHz 双核心。 600 DMIPS、520KB SRAM。 Wi-Fi、双模式蓝牙 蓝牙 2.4G/5G 无线 2.4G 3D Antenna 输入 IN1, IN2, IN3, IN4, IN5, IN6 输出 OUT1, OUT2, OUT3, OUT4, OUT5, OUT6 2.2 辅助控制器 1 规格表 指标 参数 辅助控制 Atom 辅助控制型号 ESP32 辅助控制器核心参数 240MHz 双核。 600 DMIPS，520KB SRAM。 Wi-Fi、双模式蓝牙 辅助控制器闪光灯 4MB LCD 显示 2.0\"@320*240 ILI9342C IPS 面板， 最大亮度 853nit C 型 *1 2.3 辅助控制器 2 规格表 指标 参数 辅助控制 Pico 辅助控制型号 ESP32 辅助控制器核心参数 240MHz 双核。 600 DMIPS，520KB SRAM。Wi-Fi、 双模式蓝牙 辅助控制器闪存 4MB TypeC *1 3 结构尺寸参数 ！本章以毫米为距离单位，以度为角度单位。 3.1 产品尺寸和工作空间 3.2 底座安装尺寸 底座需采用法兰安装，可使用 M6 螺丝固定在对应的固定底座上。 使用前请确认安装的底座可以承受 3 倍于机身重量的承载，以防止使用过程中因运动速度提升导致产品固定松动而引起产品损坏。 图 1 底座正视图 3.3 手臂末端 机械臂的末端可与乐高组件孔和螺纹孔兼容。 3.4 产品展示 ) --> 3.5 3D 模型下载 提供产品 3D 模型，为客户提供参考资料。 --> 4 电气特性参数 4.1 底座电气接口概述 图 1 底座正视图 图 2 底座左侧 图 3 底座右侧 序号 接口名称 定义 功能 备注 1 Type C 通信接口 与 PC 通信 开发使用 2 屏幕 显示 与按钮一起使用 3 按键 按键 A 与显示屏一起使用 4 按键 B 5 按键 C 6 开关 电源开关 控制输入电源通断 带灯（通电灯亮） 7 DC/IO 接口 GND GND IN6 数字输入信号 1~6 仅在 NPN 模式下输入 IN5 IN4 IN3 IN2 IN1 24V DC24V 8 Type C 通信接口 与 PC 通信 开发使用 9 电源 DC 输入接口 DC24V 输入 DC24V 输入 10 DC/IO 接口 24V DC24V OUT1 数字输出信号 1~6 仅在 PNP 模式下输出 OUT2 OUT3 OUT4 OUT5 OUT6 GND GND 11 急停接口 STOP 急停电路接口 4.1.1 Type C ：C 型接口用于与个人电脑连接和通信，可供开发人员使用。 4.1.2 屏幕 ：屏幕用于显示 myCobot 的通信状态，并通过 2 英寸 IPS 屏幕校准机器人移动到起点。 4.1.3 按键 A、按键 B 和按键 C 用于以协调的方式操作屏幕。 4.1.4 电源开关 ：电源开关用于控制主电源输入。如果关闭，控制器也会断电。 4.1.5 24V 输出 ：内置 DC24V，可供用户使用。 4.1.6 数字输入/输出：包括 6 个数字输入信号和 6 个数字输出信号，用于与其他设备交互，并与其他设备一起构成自动化系统的重要组成部分。 数字输入/输出：包括 6 个数字输入信号和 6 个数字输出信号，用于与其他设备交互，并与其他设备一起构成自动化系统的重要组成部分。 需要注意的是，输出信号为 PNP 形式，输入信号为 NPN 形式。以下是外部接线图： PNP 链接 4.1.7 电源直流输入接口：采用 KPPX-4P R7BFDC 电源插座。制造商提供的 24V 9.2A DC 电源适配器也可用于为 myCobot320 供电。 4.1.8 急停电路端子与急停按钮盒相连，可用于控制机器人的急停。 注意: 使用机器人时必须连接急停开关，并确保急停开关电路始终处于连接状态。 4.2 机械壁末端电气接口 4.2.1 机械臂末端介绍 A. 机械臂末端侧面接口示意如图 2-1 所示： 图 2-1 机械臂末端 序号 接口名称 定义 功能 备注 9 末端 IO 接口 末端工具IO接口 与外部设备交互 开发使用 10 末端 Grove 接口 11 Type C 接口 可用于和 PC 端连接通讯，更新固件使用 12 末端 Atom LED 用于 5X5 RGB LED（G27）显示和按键功能（G39） 13 舵机接口 连接舵机 连接外部设备舵机 4.2.2 末端接口说明 A. 如表 2-1 为末端 IO 口的定义。 标签名 信号名 功能 备注 5V0 5V 5V 电源 GND GND 主板电源信号地 3V3 3V3 3.3V 电源 G22 G22 3.3V-OUT-PIN 输出/3.3V-INT 输入 G19 G19 3.3V-OUT-PIN 输出/3.3V-INT 输入 G23 G23 3.3V-OUT-PIN 输出/3.3V-INT 输入 G33 G33 3.3V-OUT-PIN 输出/3.3V-INT 输入 ​ 表 2-1 末端 IO 口 B. 末端 Grove 接口：Grove 接口 4 定义如图 2-2 所示 图 2-2 末端 Grove 接口 C. Type C 接口：可用于和 PC 端连接通讯，更新固件使用。 D. Atom：用于 5X5 RGB LED（G27）显示和按键功能（G39） E. 舵机接口：用于末端拓展夹爪时使用，当前支持配套的自适应夹爪使用。 5 笛卡尔坐标系 5.1 关节坐标系 5.2 用户坐标系 用户坐标系是用户自定义的工作台坐标系或工件坐标系，其原点和轴线方向可根据实际需要确定，便于测量工作区间内各点的位置和安排任务。默认的用户坐标系是以机械臂底座的中心点为基准确定的，Y 轴的正方向是重载线的方向。 --> 5.3 工具坐标系 刀具坐标系是定义刀具中心点 (TCP) 位置和刀具姿态的坐标系，其原点和方向随最终工件的位置和角度不断变化。默认的刀具坐标系是根据刀具法兰中心点确定的，Y 轴的正方向与航空插口的方向相反。 --> 5.4 关节连杆参数规格 --> 5.4.1 DH 范围 5.4.2 DH 参数列表 ← 上一章 | 下一章 → "},"3-BasicSettings/3-UserInstructions/UserInstructions.html":{"url":"3-BasicSettings/3-UserInstructions/UserInstructions.html","title":"3 用户须知","keywords":"","body":"用户须知 第三章《用户须知》是为了确保用户在使用产品时能够达到既定的安全标准和效率，因此对每个用户而言都是必读的。本章节不仅提供了有关产品使用、运输、储存和维护的基本信息，以确保产品的安全运行和效率最大化，还详细阐述了因不遵守这些准则而可能导致的产品故障或损坏的责任问题。 1 安全说明 1.1 简介 本章详细介绍了有关对大象机器人执行安装、维护和维修工作的人员的常规安全信息。请在搬运、安装和使用前，先充分阅读和理解本章节的内容与注意事项。 1.2 危险识别 协作机器人的安全性建立在正确配置和使用机器人的前提上。并且，即使遵守所有的安全指示，操作者所造成的伤害或损伤依然有可能发生。因此，了解机器人使用的安全隐患是非常重要的，有利于防患于未然。 以下表 1-1~3 是使用机器人的情境下可能存在的常见安全隐患 ∶ 表 1-1 危险级安全隐患 1 机器人搬运过程中的错误操作导致的人身伤害或者机器人损伤。 2 未按要求固定机器人，例如螺钉缺少或螺钉未上紧、底座锁付能力不足以稳定支撑机器人进行高速运动等造成机器人倾倒，导致人身伤害或者机器人损伤。 3 未进行机器人的正确安全功能配置，或者少安装了安全防护工具等，造成机器人安全功能未能发挥作用，从而引起危险。 表 1-2 警告级安全隐患 1 调试程序时请勿在机器人运动范围内逗留，不合适的安全配置可能无法避免可能造成人身伤害的碰撞。 2 机器人与其他设备连接可能引发新的危险，需要重新进行全面的风险评估。 3 因工作环境中的其他设备或者机器人末端执行器等尖锐表面造成刮伤、刺伤。 4 机器人是精密机械，踩踏可能造成机器人损伤。 5 夹持不到位或关闭机器人电源、气源前（未确定末端执行器是否牢固夹持物因为失去动力而掉下）未将夹持的物体取下，可能会引起危险，例如末端执行器损坏、人被砸伤等。 6 机器人存在意外移动的风险，在任何情况下，切勿站在机器人任何轴的下方！ 7 机器人是精密机械，搬运时不能平稳放置可能会引起振动，可能会引起机器人内部部件的损伤。 8 机器人与普通机械设备相比自由度更多、运动范围更大，不满足运动范围可能会引起意外的碰撞。 表 1-3 有可能导致触电的安全隐患 1 使用非原装电缆可能会引发未知危险。 2 用电设备接触液体可能导致漏电危险。 3 电气连接错误时可能存在触电隐患。 4 请务必在关闭控制器与相关装置电源并拔出电源插头之后进行更换作业。如果在通电的状态下进行作业，则可能会导致触电或故障。 1.3 安全注意事项 使用机械臂时应遵循如下安全规则： 机械臂属于带电设备，非专业人士不得随意更改线路，否则容易给设备或者人身带来伤害。 操作机械臂时，应当严格遵守当地的法规和规范，手册中所描述的安全注意事项及描述的“危险”、 “警告”和“注意”事项仅作为当地安全规范的补充。 请在规定环境范围内使用机械臂，超出机械臂规格及负载条件会缩短产品的使用寿命甚至损坏设备。 负责安装、操作、维护 myCobot 机械臂的人员必须先经过严格培训，了解各种安全注意事项，掌握 正确的操作和维护方法之后，才能操作和维护机器人。 请勿长时间在潮湿环境下使用本产品。本产品为精密电子元器件，长时间潮湿环境工作会损坏设备。 请勿在高温环境下使用本设备。本设备外表面是由光敏树脂为原料制造而成，较高的温度会损坏设备的外壳，导致设备故障。 高腐蚀性清洁不适用于机械臂的清洁，阳极氧化的部件不适用于浸没清洁。 请勿在未安装底座时使用本产品以避免损伤本设备或意外发生，本产品应在固定且周围无障碍物的环境下使用。 请勿使用其他电源适配器供电。如因使用不符合标准的适配器导致设备损坏将不在售后服务内。 请勿拆解，拆开，拧开机械臂的螺丝或外壳等。如若拆开，则无法提供保修服务。 未经专业培训人员不得擅自维修故障产品，不得擅自拆卸机械臂，若产品出现故障，请及时联系 myCobot 技术支持工程师。 若该产品报废，请遵守相关法律正确处理工业废料，保护环境。 儿童使用过程中必须有人在旁边监控，运行完成时及时关闭设备。 机器人在运动过程中，请勿将手伸入机械臂运动范围，当心碰伤。 严禁更改或者去除和修改机械臂以及相关设备的铭牌、说明、图标和标记。 搬运、安装过程中请务必小心，应按包装箱上的提示注意轻放、按箭头方向正确放置机器人，否则容易损坏机器。 请勿擅自烧录其他产品驱动、或使用非官方推荐方式烧录固件。如因用户个人烧录其他固件导致设备损坏将不在售后服务内。 如果您对本手册的内容有任何疑问或建议，请登录大象机器人官方网站提交相关信息： https://www.elephantrobotics.com 请勿将机械臂用于以下用途： 医疗与生命攸关的应用中。 可能会引起爆炸的环境中。 未经过风险评估直接使用。 安全功能等级不够的使用。 不符合的机器人性能参数的使用。 2 运输和储存 2.1 装箱打包   在机器人产品进行装箱打包时，请确保使用专为其设计的包装材料和箱体，这些材料能够提供足够的缓冲和支撑，防止运输过程中的撞击和震动。务必检查所有零部件是否已正确固定，避免松动导致损坏。对于易碎或敏感部件，应额外使用防震保护材料进行加固。最后，确保包装箱外标有清晰的搬运和警告标签，指示正确的搬运方式和存放方向。 2.2 物流运输   在运输过程中，应使用原始包装运输机器人产品。在运输过程中，应确保机器人产品在包装箱内作为一个整体是稳定的，并通过适当的措施加以保护。在运输和长期储存过程中，环境温度应保持在-20 至+55°C 的范围内，湿度 ≤95%且无凝露。   由于机器人是精密机械，从包装中取出机器人产品时，应小心处理。在运输过程中，如果不能稳定放置，可能会引起振动并损坏机器人的内部部件。 2.3 设备储藏   运输完成后，原包装应妥善存放在干燥的地方，环境温度应保持在-20 至+55°C 的范围内，湿度 ≤95%且无凝露，以备将来重新包装和运输需要。不要将其他物品堆放到机械臂的原包装箱上，防止包装箱变形和机械臂损坏。 3 维护和保养 作为一家机器人制造商，我们重视确保客户能够正确、安全地维护和升级他们的机器人设备。为此，我们提供以下详细的维护和保养指南，包括常见维护项目及维修或升级硬件的部分，请您认真阅读: 3.1 常见维护项目及推荐周期 维护项目 描述 推荐周期 视觉检查 检查机器人有无明显的损坏、异物堆积或磨损。 日常 结构清洁 使用干净、干燥的布料清洁机器人结构部件。避免水分和侵蚀性清洁剂。 日常 紧固件检查 检查并紧固所有螺栓和连接件。 日常 润滑 对关节和移动部件进行润滑，使用制造商推荐的润滑油。 每 3 个月 电缆和接线检查 检查电缆和接线，确保无损坏或磨损。 每月 电气连接检查 确保所有电气连接牢固，无腐蚀或损坏。 每月 软件更新 检查并更新控制软件和应用程序。 每次有更新时 软件数据备份 定期备份关键软件配置和数据。 每季度 固件更新 定期检查并更新固件，以获取最新的功能和安全补丁。 每次有更新时 传感器和器件检查 检查传感器和其他关键器件，确保正常工作。 每月 紧急停止功能测试 定期测试紧急停止功能，确保其可靠性。 每月 环境条件监控 监控工作环境的温度、湿度、灰尘等，确保符合机器人的操作规格。 持续监控 安全配置复查 定期检查和确认机器人的安全配置，如限速和工作范围设定。 每月 预防性维护计划执行 按制造商的维护计划执行定期检查和维护。 按制造商指南 3.2 独立更改机器人硬件的指南 我们理解客户可能会有自行升级或维修机器人硬件的需求。在进行任何升级操作之前，请务必详细阅读产品的相关参数，并与我们的官方人员确认是否被允许进行此类操作。未经官方允许的操作可能导致产品故障，且不在保修范围内。 物料要求 官方制造或推荐的物料：所有维修和升级所需的配件和组件必须是由我们官方制造或明确推荐的。这包括但不限于电子组件、传感器、电机、连接件和任何其他可更换部件。 物料获取：客户可通过我们的官方渠道购买所需的维修和升级物料。这确保了配件的质量和兼容性。 维修或升级流程 客户自行维修：客户应负责完成维修工作。我们将提供详细的维修指导和手册，以指导客户完成维修步骤。 遵循官方指导：维修操作应严格遵循我们提供的官方指导。任何偏离官方指导的操作都可能导致设备损坏。 责任和保修政策 责任划分：制造商：提供维修和升级的官方指导、官方制造或推荐的物料，并处理由制造缺陷导致的问题。 客户：负责按照官方指导完成维修，使用官方配件。 保修政策： 保修有效：只有当维修操作完全遵循我们的指导，且使用官方配件时，保修才有效。 保修无效：若客户未按官方指导操作，或使用非官方配件进行维修或升级，导致的任何损坏都将不在保修范围内。 注意事项 安全第一：在进行任何维修或升级操作前，请确保遵循所有安全指南，包括断电和使用适当的防护装备。 技术支持：如在维修过程中遇到问题，建议停止操作并联系我们的技术支持团队寻求帮助。 我们强烈建议客户严格遵循这些指南，以确保机器人设备的安全、有效运行。不当的维修操作可能导致设备损坏并影响保修状态。如需进一步的指导或支持，请及时联系我们的专业技术团队。 4.常见问题 如何优雅地提问 1 在各地提问时，你会发现几种现象： 提问后没有得到答复。 提的问题过了很久才用人回答。 对方老是嫌弃自己太菜。 2 在提问之前，请确保已经研究过该手册。 很多问题会在这个过程中解决，切忌一开始就到 QQ 群、论坛 、issue， 或者邮件随便提问，很多在文档中一开始就说明了的问题可能不会得到社区的及时的回答，节省大家的时间，也为了更好的社区环境，大家共同更好地成长，请互相理解。 3 提问时，尽量做到以下几点，这将大大增加快速解决问题的机会： 要弄清楚发生了什么事，我做了什么，包括： 我想实现什么样的效果、什么功能？ 为了达到这种效果，我是怎么做的，具体过程是怎样的？ 在实施过程中，出现了什么错误，有什么现象（例如，报告的错误是什么，完整的错误内容是什么？） 我是否认真看了报错信息，报错信息中是否提示了错误原因和解决方法？ 根据这些错误信息，仔细想想，我能解决问题吗？ 搜索文档、issue，以及用搜索引擎能不能搜索到问题的解决方法? 4 如果自己实在解决不了问题，需要请人帮忙，需要考虑： 请教谁，在哪里请教，谁会更有几率回答我的问题？以及实时性如何？ 我应该给他提供什么数据和现象他才能愿意快速帮我解决问题？ 提供我的目的（方便让回答者知道你在做什么事情） 提供完整的实施过程，以及过程中出现的现象（方便回答者跟着你的流程去做一遍，即问题复现） 给出错误的地方，指明哪里出现的现象或结果和自己预期的不一样！（让回答者知道，哪里没达到预期） 提供出现的错误信息，需要完整，尽可能更多地截图，更多的日志，千万别小气地截一张小图，或者之给出日志的一部分（因为回答者可能很久没做这件事情了，忘记了一些细节，需要靠截图和完整日志来快速回忆起来;而且根据详细的日志可以快速定位到问题处在哪里） 怎么提问态度显得比较诚恳，就算我再小白，大家也愿意回答 5 提问模板 提问尽量做到提问优雅，不需要添加多余的语气词，抱怨的词汇，斟酌每一个词和标点符号，站在回答人的角度思考问题，如何让回答的人快速帮助自己解决问题，字数太少描述不清楚，字数太多则让人没有耐心。 6 标题 无论在哪里提问（包括 QQ 群），给自己的问题拟定一个 30 个字左右标题，阐明问题的中心思想，包括： 问题类别，是问题请教，还是 BUG 提交，还是经验分享等等。让大家在满是文字的屏幕上可以立马定位到你想做什么 一句话阐明问题的中心你思想，比如 运行摄像头示例程序，报错 reset fail，可能是硬件问题 所以综合后标题可以是这样： 【mycobot 提问】 运行摄像头示例程序，报错 reset fail，可能是硬件问题吗 这样的标题尽量不要出现: 啊啊啊啊啊为什么我的板子又不行了 为什么我的代码不能运行了 为什么我的屏幕黑屏了 【mycobot 提问】 收到了开发板，开发板屏幕是红的，一行小字，为什么呢 我运行xxx程序，出了问题 可以这样问： 【mycobot 提问】 我的板子在我接反电源后，现在板子无法启动，怎么判断板子哪里烧毁了，如果可以，怎么救活呢 7 内容 首先站在回答者的角度，如果被问问题: 首先要知道对方要做什么，实现什么目标 为了实现这个目标，他是参考了哪里的步骤做的 实际上采用了哪些具体的步骤，然后在那一步出现了问题，方便我照着他的步骤去尝试复现一下现象。如果这个问题看起来不好解决，又没有复现的步骤，那可能要花很多时间去复现，先放一放先解决其它问题吧 具体出现的问题是什么，如果他只说出了问题，我怎么知道他出了什么问题，也许是身体不适？所以这很重要，需要让他说明出问题时的现象，并指明与预期有什么不同，不然我还得去猜去对比和预期有什么不同，解决问题的时长又增加了 出问题了，我可能需要他的日志文件，方便我根据日志去看源码等进行分析，不然可能会很难解决问题，那这个问题可以放到后面慢慢看吧 综上，可以这么提问： 详细阐明自己的目标，想做什么事情，现象应该是什么样的 我有没有参考哪里的文档、代码或者教学 如何复现错误：具体怎么做的，每一个步骤写详细，直到问题出现 详细阐述错误出现时的现象，以及和期望的相比哪里不一样，需要证明问题确实出现了 附带日志文件，以及截图，甚至是视频，日志和截图一定要完整，不要只截取一小部分，回答者可能会从你的完整日志和截图中发现一些你没注意到的问题，这很重要 另外，粘贴代码注意格式，别粘贴后显示很乱，无法入目，尽量能复制后直接能运行 最后，对解答问题的社区朋友们表达感谢 驱动相关 1 关于 python Q：send_coords([x,y,z,rx,ry,rz], speed, 1)这个 API 中的各个参数是什么意思，rx、ry、rz 是对应的是欧拉角的什么？欧拉角的旋转顺序是？以及各个参数的取值范围是多少？ A：前面数组里的参数是机械臂的末端坐标，speed 是速度，最后一个参数是运动模式。rx、ry、rz 对应的应是 rpy，也就是分别对应 roll，pitch，yaw。欧拉角顺序是 zyx，zyx 是自身坐标。X、Y、Z 取值范围是-300~300.00（取值范围未定义，超出范围会返回 inverse kinematics no solution 提示），rx、ry、rz 取值范围是-180~180。 2 关于 ROS Q: 基于微控制器的 myCobot 和基于微处理器的 myCobot 如何运行 ROS？ A: 基于微控制器的机械臂我们目前是在 Ubuntu 上，需要下载虚拟机搭建虚拟环境，在虚拟环境里安装 Ubuntu 系统来运行 ROS，您也可以自己开发自己的 ROS。基于微处理器的机械臂是自带 ROS 环境的，可以直接使用。 基于微处理器的机械臂是否可以连接 pc 来使用 ros 和 moveit 呢？ A: 目前的开源资料是没有直接通讯控制的，可以通过 ros + socket，修改现有的节点文件，进行实现。 Q: 是否可以提供 rviz 模型的文件和编程案例？ A: 我们的 github 上是有提供的。 \"https://github.com/elephantrobotics/mycobot_ros\" Q: 使用 ROS 启动 rviz 模型文件时，为什么会报错报错 permission denied：'/dev/ttyUSB0'？ A: 是因为没有给串口权限。应该在终端里输入 sudo chmod 777 端口名称。 例如:sudo chmod 777 /dev/ttyUSB0 Q: 运行 ros 的滑块控制和模型跟随命令时，报错 init() takes exactly 2 arguments(3 given)是为什么？ A: 没有安装和启动 pymycobot 库。 Q: 在使用 ROS 时，打开 rviz 模型后机械臂角度和模型角度不一致是为什么？ A: 很可能是机械臂的零位没有校准，需要校准机械臂的零位。 软件问题 Q: 为什么我的编译器找不到对应的设备？ A: 需要先搭建开发环境并安装对应的项目库才可以开发设备。 1 关于 myStudio Q: myStudio 是什么？ A: 是我们公司自研软件。它是一款给我们公司推出的现有机械臂进行固件烧录或修改的工具。 更多 Q: 固件中的拖动示教是否可以记录夹爪动作？ A: 暂时无法实现使用拖动示教记录夹爪动作，因为夹爪属于编号 7 关节，我们的拖动示教只能做到对编号 1-6 关节的运动记录与播放。 Q: 烧录了 minirobot 固件之后仍然无法拖动示教是为什么？ A: 首先检查一下是否 M5Stack-basic 固件与 atom 固件都烧录了，烧录的固件是否对应所要实现的需求以及烧录的是否是最新版本的固件。 这里推荐将 minirobot 固件烧录至 v2.1 版本，顶部 atommain 固件烧录至 v4.1 版本及以上（需要支持 mystudio 版本在 v4.3.1 及以上）。 Q: 如果 myStudio 无法识别 myCobot 的串口，该怎么办？ A: 如果您的电脑设备没有提示已连接 myCobot，请先安装串口驱动程序。 另外需要注意的是，树莓派、Arduino 和 Jetson nano 系列机械臂是无法使用数据线连接到笔记本电脑的，需要在内置的系统中使用 mystudio 进行固件烧录。 Q: 拖动示教录制轨迹，能否存到卡里？ A: 目前无法存到内存卡中。并且拖动示教只能一次存一条路径，下一次录制会覆盖之前的动作。 2 关于 RoboFlow Q: 请问 robotStudio 软件编程能使用吗？ A: 我们自己的工业编程软件 roboFlow 可以使用，robotStudio 是 ABB 公司的，无法和我们互通。 Q: roboFlow 软件快速移动超过限位的原因是？ A: 可能是某个关节或多个关节超过限位。 Q: roboflow 如何加载已经写好的程序？ A: 登录后，选择程序机器人，然后点击加载程序。不能直接点击运行程序，只能点击 pro600。 3 关于 myCobot 手机控制 Q:myCobot phone controller app 应烧录什么版本的固件？ A: 需要在 mystudio 里烧录 atom 固件 atommain2.5 版本。 截至 2023/2/4，手机 APP 控制功能已禁用，重启时间请注意 mystudio 固件版本的信息发布。 4 关于 myblockly Q: 为什么运行 myblockly 时总是出现弹出框？ A: 运行 myblockly 程序前，请关闭串行端口占用。 Q: myblockly 运行时，会出现 child process exited with code 0，为什么？? A: 这不是错误。真正的错误需要逐个分析。这串字符代表程序结束，并返回二进制数 0，表示终止。 5 关于 ROS1 Q：当终端切换到 ~/catkin_ws/src 并使用 git 安装和更新 mycobot_ros 时，目标路径 \"mycobot_ros \"似乎已经存在。为什么会这样？ A：在 ~/catkin_ws/src 中已经存在一个 mycobot_ros 软件包，因此需要先删除它，然后重新运行 git。 Q: 运行 rosrun 时，终端报错，提示 counld not open port /dev/ttyUSB0: Permission: '/dev/ttyUSB0'。为什么会这样？ A: 串行端口权限不足。输入 sudo chmod 777 /dev/ttyUSB0 授予权限。 Q: 为什么 ros 程序不能在 vscode 运行？ A：由于 vscode 终端无法加载到 ros 环境中，因此需要在系统终端上运行。 Q: rosrun 运行时，终端提示Unable to register with master node [http://localhost:11311]: master may not be running yet. Will keep trying的原因是？ A: 运行 ros 程序前，需开启 ros 节点，终端输入 roscore Q: rosrun 运行时，终端报错显示counld not open port /dev/ttyUSB0：No such file or directory: '/dev/ttyUSB1'，是为什么？ A: 串口有误。需确认当前机械臂的实际串口。可通过 ls /dev/tty*查看。 Q: 在 Ubuntu18.04 中进行 catkin_make 构建代码失败,终端提示 Project 'cv_bridge' specifies '/usr/include/opencv' as an include dir, which is not found.等报错信息 A: 配置文件中的 opencv 路径与系统实际路径不相符。需使用 sudo 修改配置文件（路径为/opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake），系统实际 opencv 路径位于/usr/include/路径下。 Q: 刚克隆下来的 mycobot_ros 程序包，然后直接运行 rosrun 程序，出现 package 'mycobot_280' not found的错误或者找不到该文件之类的错误？ A: 刚克隆下来的 mycobot_ros 需要构建代码进行 ros 环境编译。终端输入 cd ~/catkin_ws/ catkin_make source devel/setup.bash Q: 编译完成后，新开终端运行 launch 指令时，为什么会出现下面的错误？ A1: 系统没有添加 ros 环境变量，所以每次开启新终端都要 source： cd ~/catkin_ws/ source devel/setup.bash A2: 系统添加 ros 环境变量，每次开启新终端后无需执行 source： # The noetic is Ubuntu20.04 system echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc A3: 可能是指令中的文件名与实际中 mycobot_ros 包里面的文件名不一致，请仔细检查指令是否有误。 硬件问题 Q:六个舵机是由什么控制的？ A2: 舵机是由顶部的 atom 来进行控制的。 Q: atom 在机械臂中的作用是什么？ A3: 它通过正向、逆向运动学和坐标切换等算法来控制机器人。Atom 暂时没有开源。 有关通信的问题 Q: 为什么用 HDMI 电缆连接了机械臂，但屏幕却没有显示？是否需要下载端口驱动程序？ A1: 检查连接是否正确，电源是否已打开。尝试使用其他接口并稳定插入接口。无需下载端口驱动程序。 Q: 不同机械臂支持哪些版本的通信接口？ A2: 基于微处理器的机械臂支持 socket 通信 TCP；基于微控制器的机械臂可以 USB 转串口通信。 Q: 机械臂的通信频率是多少？ A3: 10-20Hz. 关于参数的问题 Q: 机械臂的速度单位是什么？ A2: 180°/s. 关于末端夹持器 Q1: 夹爪是不能完全闭合吗？ A1: 夹爪本身是会有一定间隙存在，不是完全闭合的，您可以通过增加之间的垫片厚度调节。 Q2: 夹爪是什么通讯？ A2: 是 ttl 通讯。 其它问题 Q: 为什么在使用过程中电机电源会关闭？ A1: 因为电机温度太高，无法使用。请等待几分钟后再重新使用。 Q: 机械臂是否支持基于 Android 的开发？ A2: 我们不支持 Android 开发。如果您想自己开发，我们可以为您提供端口协议。 如果您已经阅读了本章的所有内容，请继续阅读下一章。 ← 上一章 | 下一章 → "},"3-BasicSettings/4-FirstTimeInstallation/FirstTimeInstallation.html":{"url":"3-BasicSettings/4-FirstTimeInstallation/FirstTimeInstallation.html","title":"4 首次安装","keywords":"","body":"1 产品标准清单 1.1 产品列表图片 Each product is numbered and detailed to ensure you can accurately refer to your listing. --> 1.2 产品标准清单对照表 序列号 产品 1 myArm Master 750 机械臂 2 产品套件，包括 USB-Type C、跳线、M6*35、杯形六角头、全螺纹不锈钢螺钉 3 DC24V 直流电源 4 固定底板 5 G 型夹 6 产品合格证 7 急停按钮 注： 包装箱到位后，请确认机器人包装完好无损。如有损坏，请及时联系物流公司和您所在地区的供应商。开箱后，请根据物品清单检查箱内的实际物品。 2 产品开箱指南 2.1 产品开箱图文引导 为什么需要按照步骤拆卸产品 在本节中，我们强烈建议按照指定步骤拆卸产品。这不仅有助于确保产品在运输过程中不受损害，还能将意外故障的风险降至最低。请仔细阅读以下图解指南，以确保您的产品在开箱过程中的安全。 1 检查包装箱是否损坏。如有损坏，请及时联系物流公司和您所在地区的供应商。 2 打开包装盒，取出产品宣传册、海绵包装盖、myCobot 机器人手臂、配套电源、急停开关、平板底座和附件包。 3 确保每一步都完成后再进行下一步，以防止不必要的损坏或遗漏。 注: 取出产品后，请仔细检查每件物品的外观。请对照物品清单检查包装箱中的实际物品。 2.2 产品开箱视频引导 ## --> 3 结构安装和固定 myArm 重 3.2 千克。由于重心会随着机器人在使用过程中的移动而发生变化，因此要求机器人一开始就固定在一个坚固的底座上。固定底座或移动底座均可。 3.1 图文引导 基本接口尺寸 底座固定孔是机器人与其他底座或平面之间的接口。具体孔径如下图所示。有 4 个直径为 4.5 毫米的沉孔，可用 M6 螺栓固定。 末端安装有法兰，可与乐高组件孔和螺纹孔兼容。安装前请确保固定底座上有相应的螺纹孔。 安装前，请确认： 环境条件符合上文第 2.2.4.3.1 节所列要求。 安装位置不小于机器人的工作范围，并有足够的安装、使用、维护和修理空间。 将底座放在合适的位置。 准备好与安装有关的工具，如螺丝、扳手等。 确认上述步骤后，请将机器人移至底座安装台上，调整机器人位置，并将机器人底座的固定孔与底座安装台上的孔对齐。对齐孔位后，将螺钉对准孔位并拧紧。 注意： 在底座安装台上调整机器人位置时，请勿在底座安装台上直接推拉机器人，以免造成划伤。手动移动机器人时，请勿对机身易损部位施加外力，以免对机器人造成不必要的损坏。 安装好机器人后，可以进行线缆连接并使用。 3.2 视频引导 如需了解更多安装细节，请扫描代码观看视频： 4 外部电缆连接 4.1 图文引导 操作前，请确认您已阅读第 3 章安全说明，以确保操作安全。同时，将电源适配器与机械臂连接，并将机械臂底座固定在桌面上。 myArm 必须使用外部电源供电，以提供足够的电力： 额定电压: 24V 额定电流: 9.4A 插头类型: R7B 请注意，不能只使用插入 TypeC 供电。 请使用官方认可的电源，以免损坏机械臂。 用例图如下图所示：（请仔细对齐用例图，以便进行连接） Step 1: Step 2: Step 3: Step 4: Step 5: Step 6: 5 开机状态显示 5.1 图文引导 5.1.1 打开电源 确保已连接电源适配器、急停开关和 HDMI 显示器，并按下电源开关 启动按钮（圆形）。 5.1.2 机器启动 启动期间，屏幕出现延时等待界面。 5.1.3 状态展示 显示屏显示系统桌面相关信息。 如果您已经阅读了本章的所有内容，请继续阅读下一章。 ← 上一章 | 下一章 → "},"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/":{"url":"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/","title":"5 Minirobot","keywords":"","body":"出厂固件介绍 MyArm M750 版本内置由 Elephant Robotics 独立开发的 miniRoboflow 应用软件。通过简单的按钮交互，即可实现拖动示教、通信转发、状态检查和零点校准等功能。 内置软件的用户界面简单明了，易于使用。通过通信转发功能，您可以使用各种编程语言和开发环境控制机器人，从而轻松实现机器人控制。 miniRoboFlow miniRoboFlow 它有六个主要章节： 使用指南 Minirobot 是一款通过结合机械臂底座的 3 个按键以及屏幕显示对 MyArm 机械臂进行控制的应用。它的功能有拖动示教、通信转发、零位校准、状态信息等），便于操作人员与大象机器人进行交互，正确使用大象机器人。 拖动示教 机器人拖动示教：操作者可以直接拖动机器人关节，使其做出理想的姿势，然后通过**按钮操作将动作保存在机器人中。cobot 是较早具备这一功能的系统。这种示教方式避免了传统示教的各种弊端，具有广阔的发展前景。这种示教方式避免了传统示教方式的各种弊端，是机器人应用的一项前瞻性技术。 零位校准 校准机械臂是精确控制机械臂的前提，而设置关节零点和初始化电机电位则是后续高级开发的基本工作。 通信转发 对于微控制器机械臂来说，通信的及时性至关重要。对于这类机械臂，我们经常向底部的M5Stack-basic发送控制指令。通过通信转发，终端执行器对指令进行分析，然后执行目标动作。目前，MyArm M750有三种通信方式： 串口、蓝牙和 WIFI。 状态信息 链接测试是一种检测功能，利用机械臂中的电机和Atom的连接状态进行检测。通过该功能，用户可以轻松排除设备故障。在链接测试过程中，可以看到机械臂设备的连接状态，包括伺服器的连接和 Atom 的通信状态。在微控制器设备中，M5Stack-basic 会显示其当前固件的版本。 烧录功能 介绍如何使用内置软件的烧录功能，主要用于更新固件版本。 ← 上一章 | 下一章 → "},"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.1-MinirobotGuide.html":{"url":"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.1-MinirobotGuide.html","title":"1 Minirobot 使用指南","keywords":"","body":"Minirobot 使用指南 1 Minirobot 简介 Minirobot 是一款通过结合机械臂底座的 3 个按键以及屏幕显示对 MyArm 机械臂进行控制的应用。它的功能有拖动示教、通信转发、零位校准、状态信息等），便于操作人员与大象机器人进行交互，正确使用大象机器人。 适用设备： -MyArm M750 使用之前请务必下载更新 atom、pico 和 basic 固件 2 如何使用 在你更新完 basic 固件之后，接通电源，按下电源开关 Minirobot 启动。开机会自动运行开机自检，屏幕上会显示 robot checking，等待大约 20 秒后进入主界面。主界面显示有 Maincontrol(拖动示教)、Transponder(通信转发)、Calibration(零位校准)、Information(状态信息)以及 Flash(烧录),通过底部的 3 个按键去控制选择，分别为 up(上移)down(下移)ok(确定)。如果你要使用 Transponder，请先连接 Type-C 到你的设备上。（在使用按键时，若无响应，请按下后停顿一会再松开，以确保检测到按键按下）在进行运动控制前，需要确认零位是否正常，将机械臂放松并移动到理论上的零位，通过 transponder 使用通讯协议读取角度值，若零位偏差过大则需要使用 calibration 先校准各关节零位，校准完成后使用 test 查看零位是否正常。 注意：开机自检中若出现电机通讯异常，末端 LED 会呈现红色，正常情况下末端 LED 为绿色。当出现通讯异常的时候，无法运动控制，此时需要通过串口调用通讯协议里的 clear_servo_error，忽略异常才能运动 2.1 拖动示教 拖动示教会按照你录制时拖动的轨迹控制机械臂运动。 2.2 通信转发 进入通信转发界面，你可以在你的设备上通过串口助手发送通讯协议中的指令来控制机械臂。 2.3 零位校准 零位校准界面可以进行关节零位校准并测试零位。 2.4 状态信息 状态信息界面可以查看电机连接状态以及固件版本号。 2.5 烧录 当你需要烧录主控 pico 固件时，进入烧录界面选中 Flash 进入烧录准备阶段。 下一页 → "},"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.2-maincontrol.html":{"url":"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.2-maincontrol.html","title":"2 拖动示教","keywords":"","body":"拖动示教 机器人拖动示教是指操作者可以直接拖动机器人的关节，使其做出理想的姿势，然后进行相应的记录。 cobot 是较早具备这一功能的系统。这种示教方式避免了传统示教的各种弊端，是机器人应用的一项前瞻性技术。 在本章中，我们将教你如何轻松上手，体验 cobot 拖动教学的乐趣。 它们的大致步骤如下： Step 1:选中Maincontrol点击OK进入拖动示教界面。 Step 2: 按下录制按钮Record。 Step 3: 选择储存路径，按下Ram。 Step 4: 拖动机械臂各关节，移动至您预想的位置，完成一组运动。 Step 5: 按下任意键停止录制，保存记录。 Step 6: 按下播放按钮Play。 Step 7: 按下Ram，机械臂开始播放已保存的记录。 Step 8: 按下Pause可暂停运动，按下Stop可停止运动，按下Play可恢复运动。 Step 9: 点击Exit退出此功能。 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.3-calibrate.html":{"url":"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.3-calibrate.html","title":"3 零位校准","keywords":"","body":"零位校准 默认机器人交付前已执行过此操作。无需重复操作。错误使用此功能可能会损坏机器人。如果您的机器人在无异常情况下工作，请勿使用。感谢您的合作。 校准机械臂是精确控制机械臂的前提，而设置关节零点和初始化电机电位则是后续高级开发的基本工作。 在本章中，我们将教您如何校准机械臂以及测试和验证关节。 Step 1: 选中Calibration，点击OK进入零位校准界面。 Step 2: 按下A键 ，开始校准机械臂。 Step 3: 首先拖动机械臂使一号关节到达零位状态（零位刻度线对齐）。 Step 4: 按照屏幕提示的关节序号(1-7),拖动机械臂使每个关节到达零位（零位刻度线对齐）。 Step 5: 依次按下NEXT，进入下一个电机校准，直至出现Already Calibrate all!! ，即完成校准。 Step 6: 按下EXIT ,可退出校准。 Step 7: 按下B键，测试机械臂各关节零位,此时机械臂会在各关节零位附近进行小幅度的运动。只有在完成零位校准后，才能使用test测试各关节。 Step 8: 按下C键，退出此功能。 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.4-transponder.html":{"url":"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.4-transponder.html","title":"4 通信转发","keywords":"","body":"通信转发 本章介绍如何使用内置软件的扩展开发功能。该功能允许您扩展设备的连接选项，并支持不同的开发环境和方法。 目前，通信转发支持三种连接方式：USB、Wi-Fi 和蓝牙。它们适用于不同的功能开发场景。 USB 和 Wi-Fi 用于连接其他主控设备，通过机器人通信协议，可以控制机器人执行相应命令。 蓝牙用于连接移动控制软件，可通过手机实现快速移动控制。 Step 1: 确认Type-C正确连接你的设备，选中Transponder点击OK进入通信转发界面。 Step 2: 使用串口连接，选中USB UART点击OK进入串口界面。串口界面检测Atom的连接(ok表示连接正常，否则显示no)。 Step 3: 使用WiFi连接，需要将WiFi名称设置为：MyCobotWiFi2.4G，密码设置为：mycobot123。选中WiFi点击OK自动搜索WiFi并连接。 Step 4: 点击Exit退出此功能。 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.5-information.html":{"url":"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.5-information.html","title":"5 状态信息","keywords":"","body":"状态信息 本章介绍如何使用基本软件检查设备状态。使用前请确保设备的软件版本和固件版本均保持不变（出厂默认版本）。如果您对软件或固件进行了任何修改，请确保您的操作符合本章中列出的要求。 目前，支持查看的信息分为电机连接状态以及机械臂内置固件版本号。 Step 1: 选中Information点击OK进入状态信息界面。 Step 2: 按下A键，开始连接检测。屏幕显示Atom以及电机连接状态。 Step 3: 按下B键，开始检测版本信息，屏幕显示固件版本。 Step 4: 按下C键，退出此功能。 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.6-flash.html":{"url":"4-FunctionsAndApplications/5-BasicFunctions/5.1-Minirobot/5.1.6-flash.html","title":"6 烧录功能","keywords":"","body":"烧录 本章介绍如何使用内置软件的烧录功能，主要用于更新固件版本。 Step 1: 选中Flash点击OK进入烧录界面。 Step 2: 按下A键，准备烧录。机器会在一段时间内重启，在此时间内烧录pico固件，注意在Flash按下的时候开始进行pico固件烧录。 Step 3: 按下C键，退出此功能。 ← 上一页 | 下一章 → "},"4-FunctionsAndApplications/6-SDKDevelopment/":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/","title":"6 软件开发指南","keywords":"","body":"SDK 开发指南 1 使用环境 myArm M750 是基于 PC 开发和使用的。由于机械臂内没有内置系统，因此在使用过程中需要机械臂和 PC 相结合。使用前请先准备好 PC。 2 开发环境 为了满足机器人在不同场景下的多样化应用需求，我们对机器人进行了多种编程语言的适配。到目前为止，我们已经适配了以下主流编程语言，我们认为您可以使用以下任何一种语言进行开发。请务必严格按照说明进行操作。任何遗漏的步骤都可能导致相应语言无法成功运行。祝您顺利使用机器人。 如果您希望使用以下编程语言， 请确保您的机器人已在应答器部分配置了 USB/Wi-Fi 模式，并确认连接正确。 5.1 Python 我们的机器人支持 Python，Python API 库的开发也日趋完善。机器人的关节角度、坐标、抓手和其他方面都可以通过 Python 进行控制。 5.2 ROS1ROS（Robot Operating System）作为一个开源的机器人操作系统，为机器人的开发和控制提供了无限的可能性。我们的机器人可以通过ROS丰富的控制功能，通过模块化的方式对机器人进行控制。无论是关节控制、路径规划还是感知反馈，ROS都提供了相应的工具和库，使得控制过程更加灵活和高效。 5.4 Communication 如果您对信息论、编码和机器人通信功能有一定的了解，那么您就应该明白，所有的通信都源于数据传输。为了方便用户操作机器人，我们开放了基于串口通信的通信协议。您可以使用串口助手或将其封装到您熟悉的任何编程语言中来控制机器人。 ← 上一章 | 下一章 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.1-BasedOnPythonDevelopmentAndUse/1_download.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.1-BasedOnPythonDevelopmentAndUse/1_download.html","title":"6.1 基于 python 开发使用","keywords":"","body":"环境配置 pymycobot 是一个和 myCobot 进行串口通讯的 Python 包，支持 Python2、Python3.5 及之后版本。 在使用 pymycobot 控制机械臂之前需要搭建 Python 环境，下面就对 Python 的下载安装做出详细说明。 1 Python 下载和安装 目前，Python 有两个版本：2.x \"和 \"3.x\"。这两个版本互不兼容。本节以版本 3.x 为例，因为它越来越受欢迎。 1.1 安装 Python 注意： 安装之前，请先确认您的电脑是 64 位还是 32 位。右键点击我的电脑，选择属性。如下图显示是 64 位的操作系统，所以选择 64 位的 Python 安装包。 Python 官方下载地址： http://www.python.org/download/ 点击Downloads选项，开始下载 Python，点击 Add Python 3.10 to PATH,点击 Install Now，开始安装 Python 出现“Setup was successful”提示，说明安装完成 1.2 运行 Python 安装成功后，打开命令提示符窗口（Win+R，输入cmd回车），敲入python后，会出现两种情况。 情况一： 屏幕上的这一提示表示 Python 已成功安装。提示符 >>> 表示 Python 交互环境。如果输入 Python 代码，可以立即得到执行结果。 情况二： 假如输入错误（比如输入 pythonn），则会出现错误提示： 注意： 出现错误的信息一般都是没有配置环境变量导致的，可以参考 1.3 配置环境变量修改环境变量。 1.3 配置环境变量 由于 Windows 会根据一个 Path 的环境变量设定的路径去查找 python.exe，如果没找到，就会报错。因此，如果安装时漏掉了勾选Add Python 3.10 to PATH，则需要手动把 python.exe 所在的路径添加到 Path 中，或者重新安装一遍 Python，记得勾选上 Add Python 3.10 to PATH 选项即可。 以下是手动添加 python.exe 所在的路径步骤。 右键我的电脑 –> 选择属性 –> 选择高级系统设置 –> 选择右下角的环境变量： 环境变量包括用户变量和系统变量。对于用户变量，用户可以通过 cmd 命令使用自己下载的程序。将目标程序的绝对路径写入用户变量。 以上步骤完成后，打开命令提示符窗口（Win+R，再输入 cmd，回车），敲入 python，出现下图中的提示表示成功： 2 PyCharm 安装和使用 PyCharm 是一款功能强大的 Python 编辑器，具有跨平台性。首先介绍 PyCharm 在 Windows 系统中的安装步骤。 下载地址 PyCharm 2.1 下载安装 进入该网站后，我们会看到如下界面： 根据界面介绍下载文件，Professional 表示专业版，Community 是社区版，推荐安装社区版，因为是免费使用的。 下载好之后开始安装，点击 Next: 按照个人喜好选择相应选项，然后点击 Next: 点击 Install: 下载中: 点击 Finish 结束安装： 2.2 创建项目 PyCharm 安装完成之后进入该软件，创建第一个程序。 单击桌面上的 PyCharm 图标，进入到 PyCharm 中，如下图所示，点击 New Project : Interpreter 用于解释 python 程序。找到 Interpreter，开始对解释器进行设置，点击 Add Interpreter 点击 New，找到 python.exe 存储位置，勾选 Inherit global site-package 选项： 设置 Location。Location 是存储 PyCharm 项目的地方，可根据需要自行选择。 点击 Create，会出现一个样本: 新建 PyCharm 文件。右击箭头指向的文档图标，点击 New，点击 Python File，新建成功: 命名 Python File. 文件创建成功后便进入如下的界面，便可以编写自己的程序了: 3 准备工作 固件烧录。固件是系统控制机器人的驱动程序。 MyStudio>)。 M5Stack 版本 底部的 Basic 需要烧录 minirobot。烧录完成后选择 Transponder 功能（该功能用于接收转发底部 Basic 发送的指令，从而执行目标动作），点击 Press A，出现 Atom：OK 提示信息即为成功。此外，M5 版本末端 Atom 烧录最新版的 atomMain，出厂默认已烧录，无需自行烧录。 Pi \\ jetsonnano 版本末端 Atom 烧录最新版的 atomMain，出厂默认已烧录，无需自行烧录。 pymycobot 安装。打开一个控制台终端(快捷键 Win+R,输入 cmd 进入终端)，输入以下命令： pip install pymycobot --upgrade --user 源码安装。打开一个控制台终端(快捷键 Win+R,输入 cmd 进入终端)，输入以下命令即可安装： git clone https://github.com/elephantrobotics/pymycobot.git # 其中填写你的安装地址，不填默认在当前路径 cd /pymycobot # 进入到下载包的pymycobot文件夹 # 根据你的python版本运行下面其一命令 # Install python2 setup.py install # or python3 setup.py install 更新 pymycobot pip install pymycobot --upgrade 4 导入 pymycobot 上述准备工作完成之后，开始通过 Python 代码实现对机械臂的操控。这里以 myArm Master 750 版本为例进行演示。 输入以下代码，导入我们的库： from pymycobot import MyArmM 注意： 如果代码下方没有出现红色波浪线，则说明 pymycobot 安装成功。 如果出现红色波浪线，请访问 https://github.com/elephantrobotics/pymycobot 手动下载 pymycobot 并将其放入 python 库。 5 简单演示 创建一个新的 Python 文件，输入以下代码来设置 RGB 灯光面板的颜色。 注意： 各款设备的对应的波特率不尽相同，使用时请查阅资料了解其波特率，串口编号可通过计算器设备管理器 或串口助手进行查看。 相应代码： # demo.py from pymycobot import MyArmM import time # 初始化一个MyArmM对象 # 下面为 MyArmM-windows 版本创建对象代码 myarmm = MyArmM(\"COM4\", 115200) i = 7 # 循环7次 while i > 0: myarmm.set_tool_led_color(0, 0, 255) # 蓝灯亮 time.sleep(2) # 等2秒 myarmm.set_tool_led_color(255, 0, 0) # 红灯亮 time.sleep(2) # 等2秒 myarmm.set_tool_led_color(0, 255, 0) # 绿灯亮 time.sleep(2) # 等2秒 i -= 1 运行示例文件： python3 demo.py 机器顶部的灯以蓝、红、绿灯的顺序 2 秒钟的间隔连续闪烁 7 次。 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.1-BasedOnPythonDevelopmentAndUse/2_API.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.1-BasedOnPythonDevelopmentAndUse/2_API.html","title":"API","keywords":"","body":"API 使用说明 API (Application Programming Interface), 也称为应用程序编程接口函数，是预定义的函数。使用以下函数接口时，请在开始时输入以下代码导入我们的 API 库，否则将无法成功运行 from pymycobot import MyArmM # Example myarmm = MyArmM('/dev/ttyAMA1') # 获取所有关节的当前角度 angles = myarmm.get_joints_angle() print(angles) # 设置关节1移动到40, 速度为20 myarmm.set_joint_angle(1, 40, 20) 1. 机器人状态查询 1.1 get_robot_modified_version() 功能: 获取机器人更正版本号 参数: 无 返回: 无 1.2 get_robot_firmware_version() 功能: 获取机器人固件版本（主次版本） 参数: 无 返回: 无 1.3 get_robot_tool_modified_version() 功能: 获取机器人工具修正版本 参数: 无 返回: 无 1.4 get_robot_tool_firmware_version() 功能: 获取机器人工具固件版本(末端Atom) 参数: 无 返回: 无 1.5 set_robot_err_check_state(status) 功能: 设置错误检测状态 您可以关闭错误检测，但除非必要，否则不要将其关闭 参数: status - int 1 - 打开错误检测 0 - 关闭错误检测 返回: 无 1.6 get_robot_err_check_state() 功能: 读取错误检测状态 参数: 无 返回: 1 - 错误检测打开 0 - 错误检测关闭 1.7 get_robot_error_status() 功能: 获取机器人错误状态, 此接口返回在15s内 参数: 无 返回: 没有错误返回: [0,0,0,0,0,0,0,0],假设在第 1 节中报告了错误 1 和 3，它应该返回：[[1,3]，0,0,0,0,0,0,0,0] 1.8 get_robot_power_status() 功能: 获取机器人电源状态 参数: 无 返回: 1 - 开机状态 0 - 关机状态 1.9 set_robot_power_on() 功能: 将机器人设置为开机状态 参数: 无 返回: 无 1.10 set_robot_power_off() 功能: 将机器人设置为关机状态 参数: 无 返回: 无 1.11 clear_robot_err() 功能: 清除机器人异常，忽略错误接头，继续移动 参数: 无 返回: 无 1.12 set_recv_queue_max_len(max_len) 功能: 设置接收命令队列的总长度 参数: max_len: (int) 队列总长度，取值范围 1 - 100 返回: 无 1.13 get_recv_queue_max_len() 功能: 读取命令队列的总长度，默认长度为 100 参数: 无 返回: max_len (int) 命令队列最大长度 1.14 clear_recv_queue() 功能: 清除接收命令的队列 参数: 无 返回: 无 1.15 get_recv_queue_len() 功能: 读取接收队列的当前长度 参数: 无 返回: 无 2. 关节伺服控制 2.1 set_joint_angle(joint_id, angle, speed) 功能: 将各个关节设置为移动到目标角度 参数: joint_id: (int) 关节编号 angle: (int) 目标角度 speed: (int) 移动速度，取值范围 1 - 100 返回 无 2.2 get_joint_angle(joint_id) 功能: 获取指定关节的当前角度 参数: joint_id: 机械臂的指定关节,范围为 1~6 返回: angle 表示当前关节的角度 2.3 set_joints_angle(angles, speed) 功能: 将所有关节设置为移动到目标角度 参数: angles: (list[int]) 目标角度 speed: (int) 移动速度，取值范围 1 - 100 返回 无 2.4 get_joints_angle() 功能: 获取所有关节的当前角度 参数: 无 返回: angles 返回一个浮点型的列表，表示所有关节的当前角度 2.5 get_joints_max() 功能: 读取所有关节的最大角度 参数: 无 返回: angles 返回一个浮点型的列表，表示所有关节的最大角度 2.6 get_joints_min() 功能: 读取所有关节的最小角度 参数: 无 返回: angles 返回一个浮点型的列表，表示所有关节的最小角度 2.7 is_robot_moving() 功能: 查看机器人是否在移动 参数: 无 返回 1 - 正在移动 0 - 静止 2.8 stop_robot() 功能: 机器人停止移动 参数: 无 返回 无 3. 伺服电机控制 3.1 set_servo_calibrate(servo_id) 功能: 设置指定伺服电机的零位 参数: servo_id 表示伺服电机索引位，取值返回 1 - 6 返回: 无 3.2 set_servos_encoder_drag(encoders, speeds) 功能: 将多个具有指定速度的伺服电机设置为目标编码器电位值 参数: encoders: (list[int]) 电位值 speeds: (list[int]) 速度 返回: 无 3.3 set_servo_encoder(servo_id, encoder, speed) 功能: 将单个电机运动设置为目标编码器电位值 参数: servo_id: (int) 表示伺服电机索引位，取值返回 1 - 6 encoder: (int) 电机电位值， 取值返回 0 - 4095 speed: (int) 电机移动速度，取值范围 1 - 100 返回 无 3.4 get_servo_encoder(servo_id) 功能: 获取指定伺服电机的当前编码器电位值 参数: servo_id: (int) 表示伺服电机索引位，取值返回 1 - 6 返回: encoder:(int) 表示机械臂的电位值，取值范围是 0 ~ 4096 3.5 set_servos_encoder(positions, speed) 功能: 设置移动到目标的多个电机的编码器电位值 参数: positions: (list[int]) 多个电机的目标电位值 0 - 4095 speed: (int) 电机移动速度，取值范围 1 - 100 返回 无 3.6 get_servos_encoder() 功能: 获取多个伺服电机的当前编码器电位值 参数: 无 返回: encoders: (list[int]) 表示机械臂的电位值，取值范围是 0 ~ 4096，六轴长度为 6，四轴长度为 4，表示方法为：[2048,2048,2048,2048,2048,2048] 3.7 get_servos_speed() 功能: 获取多个伺服电机的当前运动速度 参数: 无 返回: speeds: (list[int]) 伺服电机运动速度 3.8 is_all_servos_enabled() 功能: 获取多个伺服电机的连接状态 参数: 无 返回: status: (list[int]) 1 : 连接成功 0 : 连接失败 3.9 get_servos_temp() 功能: 获取多个伺服电机的温度 参数: 无 返回: list(float) 每个伺服电机的温度 3.10 get_servos_voltage() 功能: 获取多个伺服电机的电压 参数: 无 返回: list(float) 每个伺服电机的电压 3.11 get_servos_current() 功能: 获取多个伺服电机的电流 参数: 无 返回: list(float) 每个伺服电机的电流 3.12 get_servos_status() 功能: 获取多个伺服电机的所有状态 参数: 无 返回: list(int) 每个伺服电机的状态 3.13 get_servos_protect_current() 功能: 获得多个伺服电机保护电流 参数: 无 返回: list(int) 每个伺服电机的保护电流 3.14 set_servo_enabled(joint_id, state) 功能: 设置伺服电机转矩开关 参数: joint_id: (int)电机索引位 state: (int) 1 - 上电 0 - 释放 返回: 无 4. 伺服电机系统参数修改 4.1 set_servo_p(servo_id, data) 功能: 设置指定伺服电机的位置环P比例系数 参数: servo_id: (int) 电机索引位 data: (int) 环P比例系数 返回: 无 4.2 get_servo_p(servo_id) 功能: 读取指定伺服电机的位置环P比例系数 参数: servo_id: (int) 电机索引位 返回: 环P比例系数 4.3 set_servo_i(servo_id, data) 功能: 设置指定伺服电机的位置环I比例系数 参数: servo_id: (int) 电机索引位，取值范围 0 -254 data: (int) 环I比例系数，取值范围 0 -254 返回: 无 4.4 get_servo_i(servo_id) 功能: 读取指定伺服电机的位置环I比例系数 参数: servo_id: (int) 电机索引位，取值范围 0 -254 返回: data: (int) 环I比例系数，范围 0 -254 4.5 set_servo_d(servo_id, data) 功能: 设置指定伺服电机的位置环D比例系数 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 data: (int) 0 - 254 返回: 无 4.6 get_servo_d(servo_id) 功能: 读取指定伺服电机的位置环D比例系数 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 返回: data: (int) 0 - 254 4.7 set_servo_cw(servo_id, data) 功能: 设置指定伺服电机的编码器顺时针不灵敏区 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 data: (int) 0 - 32 返回: 无 4.8 get_servo_cw(servo_id) 功能: 读取指定伺服电机的编码器顺时针不灵敏区 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 返回: data: (int) 0 - 32 4.9 set_servo_cww(servo_id, data) 功能: 设置指定伺服电机的编码器逆时针不灵敏区 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 data: (int) 0 - 32 返回: 无 4.10 get_servo_cww(servo_id) 功能: 读取指定伺服电机的编码器逆时针不灵敏区 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 返回: 无 4.11 set_servo_system_data(servo_id, addr, data, mode) 功能: 设置指定伺服电机的系统参数 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 addr: (int) 数据地址 data: (int) 0-4096 数据 mode: (int) 1/2 返回: 无 4.12 get_servo_system_data(servo_id, addr, mode) 功能: 读取指定伺服电机的系统参数 参数: servo_id: (int) 伺服电机的索引号，按照关节id给入1 - 6 addr: (int) 数据地址 mode: (int) 1/2 返回: 数据 5. IO 控制 5.1 set_master_out_io_state(io_number, status) 功能: 设置主控引脚状态 参数: io_number: (int) 引脚位置，取值范围 1-2 status: (int) 1 - 高电平 0 - 低电平 返回: 无 5.2 get_master_in_io_state(io_number) 功能: 读取主控引脚状态 参数: io_number: (int) 引脚位置，取值范围 1-2 返回: 1 - 高电平 0 - 低电平 5.3 get_assist_in_io_state(io_number) 功能: 获取辅助引脚状态 参数: io_number: (int) 辅助引脚号，取值范围额1 - 6 返回: 1 - 高电平 0 - 低电平 5.4 set_assist_out_io_state(io_number, status) 功能: 设置辅助引脚状态，默认设置高电平 参数: io_number：(int) 辅助引脚号，取值范围1 - 6 status: (int) IO口状态 1 - 高电平 0 - 低电平 返回: 无 5.5 set_tool_out_io_state(io_number, status) 功能: 设置末端引脚状态 参数: io_number: (int) 引脚位置，取值范围 1-2 status: (int) 1 - 高电平 0 - 低电平 返回: 无 5.6 get_tool_in_io_state(io_number) 功能: 读取末端引脚状态 参数: io_number: (int) 引脚位置，取值范围 1-2 返回: 1 - 高电平 0 - 低电平 6. Atom 控制 6.1 set_tool_led_color(r, g, b) 功能: 设置 Atom LED 颜色 参数: R: (int) 0 - 255 G: (int) 0 - 255 B: (int) 0 - 255 返回: 无 6.2 is_tool_btn_clicked() 功能: 读取 Atom 按下状态 参数: 无 返回: 1 - 按下 0 - 未按下 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.1-BasedOnPythonDevelopmentAndUse/6_example.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.1-BasedOnPythonDevelopmentAndUse/6_example.html","title":"相关案例","keywords":"","body":"演示代码与视频 以下视频供参考。 注： 各款设备的对应的波特率不尽相同，使用时请查阅资料了解其波特率，串口编号可通过 计算器设备管理器或串口助手进行查看。 1 获取关节角度 from pymycobot import MyArmM import time myarmm = MyArmM(\"COM3\") # 获取所有关节的当前角度 angles = myarmm.get_joints_angle() print(f\"当前所有的关节角度是: {angles}\") time.sleep(0.1) # 获取关节1的角度 angle = myarmm.get_joint_angle(1) print(f\"关节1当前的角度为 {angle}\") # 获取关节2的角度 angle = myarmm.get_joint_angle(2) print(f\"关节2当前的角度为 {angle}\") # 获取关节3的角度 angle = myarmm.get_joint_angle(3) print(f\"关节3当前的角度为 {angle}\") 2 控制关节移动五个点位 from pymycobot import MyArmM import time myarmm = MyArmM(\"COM3\") # 将所有的关节复位, 速度为40 myarmm.set_joints_angle([0, 0, 0, 0, 0, 0], 40) # 等待所有关节运动到指定位置 time.sleep(3) # 将所有的关节按照指定的角度移动, 速度为40 myarmm.set_joints_angle([90, 45, -90, 90, -90, 90], 40) # 等待所有关节运动到指定位置 time.sleep(3) # 将所有的关节复位, 速度为40 myarmm.set_joints_angle([0, 0, 0, 0, 0, 0], 40) # 等待所有关节运动到指定位置 time.sleep(3) # 将所有的关节按照指定的角度移动, 速度为40 myarmm.set_joints_angle([90, 45, -90, 90, -90, 90], 40) # 等待所有关节运动到指定位置 time.sleep(3) # 将所有的关节复位, 速度为40 myarmm.set_joints_angle([0, 0, 0, 0, 0, 0], 40) # 等待所有关节运动到指定位置 time.sleep(3) # 将所有的关节按照指定的角度移动, 速度为40 myarmm.set_joints_angle([90, 45, -90, 90, -90, 90], 40) # 等待所有关节运动到指定位置 time.sleep(3) 3 控制程序案例 程序地址 https://github.com/elephantrobotics/pymycobot/tree/main/demo/myArm_M&C_demo 安装依赖 pip install -r requirement.txt 运行程序 python main.py 程序使用说明 串口的打开有顺序要求：先开启myArmM的串口连接，再开启myArmC的串口连接。 两个串口都开启以后就可以通过移动myArmC来控制myArmM运动。 ← 上一页 | 下一节 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/1_download.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/1_download.html","title":"6.2 基于 ROS1 开发使用","keywords":"","body":"Myarm C650版本: 在Linux中安装不同版本的ubuntu系统 1 虚拟机安装 前往官方网站下载虚拟机Virtual Box 或者前往官方网站下载虚拟机 VM ware 当然，如果您已经拥有您的虚拟机，您可以跳过该步骤。我们选择下载Virtual box，因为它是免费的。 2 新建虚拟机 2.1 创建虚拟机 在控制中选择新建输入虚拟机名称和虚拟机存放的位置，选择虚拟机类型为Linux，选择ubuntu64位版本，进行下一步。 按照自己的需求配置内存大小，进行下一步。 选择现在创建虚拟硬盘，进行创建。 虚拟硬盘类型选择VDI类型，进行下一步。 分配虚拟硬盘大小，由于需要安装ubuntu系统，而且还会在该系统中进行操作，建议大小不要低于20G。 2.2 导入ubuntu系统 2.2.1 下载ubuntu系统。 请根据自己的需要选择ubuntu版本进行安装 注意： ROS2需要下载20.04版本。 16.04版本18.04版本20.04版本 三种版本的安装方法和过程都是相同的，这里以18.04版本作为例子进行安装 下载完成后有如图文件： 2.2.2 导入ubuntu到虚拟机中 在Virtual box中找到之前安装的虚拟机，进入设置，并在存储中给控制器分配光盘： 然后打开虚拟机进行ubuntu安装，并点击启动。 2.2.3 ubuntu安装 等待系统启动，进入欢迎界面，选中“中文（简体）”，并点击“安装 Ubuntu”按钮； 点击“继续”按钮； 选中“清除整个磁盘并安装 Ubuntu”选项，点击“现在安装”按钮； 在弹出的对话框中点击“继续”按钮； 设置地理位置，点击“继续”按钮； 设置用户名和密码，点击“继续”按钮； 进入系统安装界面，请耐心等待； 待安装完成，在弹出的对话框中，点击“现在重启”按钮，完成安装。 一、配置Linux清华镜像源 1.1介绍 我们在下载很多基础的工具请求的基本上是国外的服务器，这对于国内用户来说，无疑是非常糟糕的体验，其下载速度慢、请求失败往往成为很多刚入门Linux的小白最大的困扰。 不过好在国内有着稳定高速且免费的镜像网站，我们可以通过修改系统配置文件来享受这些优秀的网站资源。 清华源：https://pypi.tuna.tsinghua.edu.cn/simple/阿里云：https://mirrors.aliyun.com/pypi/simple中科大：https://pypi.mirrors.ustc.edu.cn/simple/ 1.2 开始配置 这里我以 Ubuntu 20.04为例阿里云来配置 二、ROS安装 2.1 添加ros环境源 sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\"> /etc/apt/sources.list.d/ros-latest.list' 2.2 添加密钥 sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 2.3 安装ROS（注意ubuntu版本） sudo apt update sudo apt install ros-noetic-desktop-full 2.4 初始化rosdep sudo rosdep init && rosdep update 自带的可能会出现错误。可以使用大神基于 rosdep 源码写的rosdepc。 sudo pip install rosdepc 没有pip可以试试pip3 sudo pip3 install rosdepc pip3没有选择安装 sudo apt-get install python3-pipsudo pip install rosdepc 2.5 再次初始化 sudo rosdepc initrosdepc update 2.6 配置环境变量 echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrcsource ~/.bashrc 2.7 安装 rosinstall sudo apt install python3-rosinstall python3-rosinstall-generator python3-wstool build-essential 2.8 测试ROS（打开三个终端窗口） 第一个窗口运行 roscore roscore 第二个终端窗口，输入： rosrun turtlesim turtlesim_node当出现有一个海龟的窗口，证明运行成功了 打开第三个终端窗口，输入： rosrun turtlesim turtle_teleop_key出现这样的提示后，我们用鼠标聚焦第三个终端窗口，便可以通过按下 ↑ ↓ ← →键来对小海龟进行控制。 安装完成 到了这里，恭喜你已经完成了ROS的安装、配置且运行。 祝你日后的 ROS 学习也更加畅通无阻！ 三、MoveIt安装 MoveIt 是 ros 中一系列移动操作的功能包的组成，主要包含运动规划，碰撞检测，运动学，3D 感知，操作控制等功能。 3.1 更新软件源列表 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，以更新软件源列表： sudo apt-get update 3.2 安装 MoveIt 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，执行 MoveIt 的安装： sudo apt-get install ros-noetic-moveit 四、 git 安装 4.1 添加软件源 将 git 安装的软件源添加到 ubuntu 的软件源列表中，打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令： sudo add-apt-repository ppa:git-core/ppa 4.2 更新软件源列表 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，以更新软件源列表： sudo apt-get update 4.3 安装 git 打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令，执行 git 的安装： sudo apt-get install git 4.4 验证安装 读取 git 版本，打开一个控制台终端(快捷键Ctrl+Alt+T)，在终端窗口输入以下命令： git --version 在终端中可以显示 git 版本号，如下，即为安装成功 4.5 使用 在后续下载 ros 包需要用到git，git 的使用可以参考下面链接：https://git-scm.com/book/zh/v2https://www.runoob.com/git/git-tutorial.html MyarmC650 安装 MyarmC650 是 ElephantRobotics 推出的，适配旗下桌面型六轴机械臂 Myarm系列 的ROS 包。 项目地址：https://github.com/elephantrobotics/mycobot_ros/tree/myarm-c650 5.1 前提 在安装包之前，请保证拥有 ros 工作空间。这里我们给出创建工作空间的样例命令，默认为catkin_ws, 打开一个控制台终端(快捷键Ctrl+Alt+T)，在命令行输入以下命令： mkdir -p ~/catkin_ws/src # 创建文件夹cd ~/catkin_ws/src # 进入文件夹catkin_init_workspace # 把当前目录初始化为一个ROS工作空间cd .. # 返回上级目录catkin_make # 构建工作区中的代码 创建好之后会生成一个文件夹 添加工作空间的环境Bash官方默认的 ROS1 工作区是 catkin_ws。 Ubuntu 16.04 echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.bashrc Ubuntu 18.04 echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.bashrc Ubuntu 20.04 echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.bashrc source ~/.bashrc 5.2 安装 NOTE： 本包依赖于ROS和MoveIT，使用前确保以成功安装ROS和MoveIT。本包与真实机械臂的交互依赖于PythonApi - pymycobotApi项目地为：https://github.com/elephantrobotics/pymycobot 快速安装：pip install pymycobot --upgrade 执行pip install pymycobot --upgrade命令时，若出现如下图错误提示： 根据提示输入以下命令安装pip sudo apt install python-pip 如果你的Ubuntu系统是20.04版本，请执行命令sudo apt install python3-pip安装pip pip安装完成后，终端再次执行 pip install pymycobot --upgrade 安装方式依赖于Git，请确保电脑中已安装Git。 官方默认的 ROS1 工作区是 catkin_ws。 打开终端： cd ~/catkin_ws/src # 进入工作区的src文件夹中git clone https://github.com/elephantrobotics/mycobot_ros.git # 克隆github上的代码cd .. # 返回工作区catkin_make # 构建工作区中的代码cd ..source devel/setup.bash # 添加环境变量 至此，环境搭建部分完成 为了后续的编程，我们还需要下载一个 VS code 这里我们就选择最方便的一种方法： 在Ubuntu Software中安装【简单、方便】 安装好之后，我们还需要安装一下python环境要想运行python文件很简单，点击左边扩展(ctrl+shift+X)--搜索python，下载安装即可 安装好后就可以点击左上文件，选择新建文件，选择文件类型为python，编写自己的python代码，然后点击上方菜单栏的运行就可以 rviz的简单介绍及使用 rviz是ROS中一款三维可视化平台，一方面能够实现对外部信息的图形化显示，另外还可以通过 rviz 给对象发布控制信息，从而实现对机器人的监测与控制。1 rviz的安装及界面简介在安装ros时，如果执行的完全安装，rviz已经安装好了,您可以直接尝试运行；如果没有完全安装，可单独安装rviz: Ubuntu16.04 sudo apt-get install ros-kinetic-rviz Ubuntu18.04 sudo apt-get install ros-melodic-rviz Ubuntu20.04 sudo apt-get install ros-noetic-rviz 安装完成后，请先打开一个新的终端(快捷键Ctrl+Alt+T),输入如下指令： roscore 然后再打开一个一个新的终端(快捷键Ctrl+Alt+T)输入命令打开rviz rosrun rviz rviz 或 rviz 打开rviz,显示如下界面： 1.1 各个区域介绍 左侧为显示器列表，显示器是在3D世界中绘制某些内容的东西，并且可能在显示列表中具有一些可用的选项。 上方是工具栏，允许用户用各种功能按键选择多种功能的工具 中间部分为3D视图: 它是可以用三维方式查看各种数据的主屏幕。3D视图的背景颜色、固定框架、网格等可以在左侧显示的全局选项（Global Options）和网格（Grid）项目中进行详细设置。 下方为时间显示区域，包括系统时间和ROS时间等。 右侧为观测视角设置区域，可以设置不同的观测视角。 本部分我们只进行粗略的介绍，如果您想了解更多详细的内容，可以前往用户指南进行查看。 ← 上一节 | 下一页 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/2_workcode.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/2_workcode.html","title":"ROS工作空间代码和使用","keywords":"","body":"一、仿真 我们提供一些 静态仿真 和 动态仿真， 用以和 MyarmM750 交互。 1.1 静态仿真 这里的静态仿真是指：用rviz中的滑动模块与仿真中的MyarmM750交互在工作空间打开终端命令行中输入: source devel/setup.bash # 添加环境变量roslaunch myarm_m demo_rviz.launch 成功运行launch文件后，终端会显示： 同时会打开rviz，生成MyarmM750的仿真模型 1.2 动态仿真 这里的动态仿真是指：运动现实中的MyarmM750与仿真中的MyarmM750交互 首先我们需要将MyarmM750机械臂通过USB转typeC线连接到我们的电脑上，并给其通电通过按钮选中 Transponder 再按“OK”按钮 然后屏幕会显示 我们可以看到箭头指向 “USB UART” ，再按“OK”按钮，进入之后会显示 “NO”，再按 “Exit” 按钮，回到箭头指向 “USB UART” ，再按“OK”按钮，这时会显示 “OK” 这时我们的MyarmM750已经成功连接上电脑 接下来在工作空间打开终端命令行中输入: source devel/setup.bash # 添加环境变量roslaunch myarm_m demo_rviz.launch 成功运行launch文件后，终端会显示： rviz文件也会正常显示 打开VS code中的项目，找到 myArm/myarm_m/scripts/read_control.py 这个 read_control.py 文件 我们也可以继续在终端输入下面的指令，以便查看MyarmM750每个关节的角度变化： rostopic echo /joint_state 接下来我们用手移动现实中的MyarmM750机械臂，rviz中的机械臂也会跟着运动： 至此与MyarmM750机械臂的交互已全部完成 二、MyarmC650控制MyarmM750运动 此功能需要将两台机械臂通过USB的方式同时连接到我们的电脑上，我们要区分每台机械臂连接我们的串口是多少，新建终端： 按 TAB键 如何区分串口号：先连接一台机械臂然后输入ls /dev/tty查看当前串口号，在不断开这一台机械臂的情况下，连接另一台机械臂，输入该指令查看串口号 在工作空间新建一个终端输入： roscore 再新建一个终端，输入： source devel/setup.bashroslaunch myarm_m combined_control.launch 启动rviz仿真之后，再打开myArm/myarm_m/scripts/combined_control.py 路径下的.py文件 此时，我们就能用手去运动MyarmC650机械臂，rivz中的两款机械臂都跟随现实中的MyarmC650运动，在此同时，现实中的MayrmM750机械臂也会跟随MyarmC650运动（夹抓功能也可以运动） 至此，MyarmC650控制MyarmM750的功能全部实现 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/3_ROScode.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/3_ROScode.html","title":"ROS常用工具命令","keywords":"","body":"一、前言 在 ROS 同提供了一些实用的命令行工具，可以用于获取不同节点的各类信息，常用的命令如下: rosnode : 操作节点rostopic : 操作话题rosservice : 操作服务rosmsg : 操作msg消息rossrv : 操作srv消息rosparam : 操作参数官方参考网址：http://wiki.ros.org/ROS/CommandLineTools 二、rosnode rosnode 是用于获取节点信息的命令 三、rostopic rostopic包含rostopic命令行工具，用于显示有关ROS 主题的调试信息，包括发布者，订阅者，发布频率和ROS消息。它还包含一个实验性Python库，用于动态获取有关主题的信息并与之交互。 3.1rostopic list 直接调用即可，控制台将打印当前运行状态下的主题名称rostopic list -v : 获取话题详情(比如列出：发布者和订阅者个数…) 3.2rostopic pub 可以直接调用命令向订阅者发布消息为roboware 自动生成的 发布/订阅 模型案例中的 订阅者 发布一条字符串 以小海龟为例的发布一条运动信息： 3.3rostpic echo 获取指定话题当前发布的消息 3.4rostopic info 获取当前话题的信息 消息类型 发布者信息 订阅者信息 四、rosservice rosservice包含用于列出和查询ROSServices的rosservice命令行工具。调用部分服务时，如果对相关工作空间没有配置 path，需要进入工作空间调用 source devel/setup.bash 4.1rosservice args 打印服务参数 4.2rosservice call 调用服务 生成一只 新的乌龟 五、rosmsg rosmsg是用于显示有关 ROS消息类型的 信息的命令行工具。 5.1rosmsg package 列出某个包下的所有msg 5.2rosmsg show 显示消息描述 六、rossrv rossrv是用于显示有关ROS服务类型的信息的命令行工具，与 rosmsg 使用语法高度雷同。 6.1rossrv package 6.2rossrv show 显示消息描述 七、rosparam rosparam包含rosparam命令行工具，用于使用YAML编码文件在参数服务器上获取和设置ROS参数。 7.1rosparam set 设置参数 rosparam set name xxx 7.2rosparam get 获取参数 rosparam get name 7.3rosparam delete 删除参数 rosparam delete name 7.4rosparam load(先准备 yaml 文件) 从外部文件加载参数 rosparam load xxx.yaml 7.5rosparam dump 将参数写出到外部文件 rosparam dump yyy.yaml 八、URDF介绍 Unified Robot Description Format，统一机器人描述格式，简称为URDF。ROS中的urdf功能包包含一个URDF的C++解析器，URDF文件使用XML格式描述机器人模型。 URDF 不能单独使用，需要结合 Rviz 或 Gazebo，URDF 只是一个文件，需要在 Rviz 或 Gazebo 中渲染成图形化的机器人模型。 8.1 urdf文件描述 代码示例：本处只截取部分代码进行展示： 可以看出，urdf文件并不复杂，主要是由 link 和 joint 两个部分不断重复而成。 8.2 link部分 link元素描述具有惯性、可视特征和碰撞属性的刚体 8.2.1 属性 name： 用来描述链接本身的名称 8.2.2 元素 \\ 连杆的可视化属性。用于指定连杆显示的形状（矩形、圆柱体等），同一连杆可以存在多个visual元素，连杆的形状为多个元素两个形成。一般情况下模型较为复杂可以通过soildwork绘制后生成stl调用，简单的形状如添加末端执行器等可以直接编写。同时可以在此处可根据理论模型和实际模型差距调整几何形状的位置。 \\ (可选) 连杆几何形状的名字。 \\ (可选，defaults to identity if not specified) 相对于连杆的坐标系的几何形状坐标系。 xyz (optional: defaults to zero vector) 表示x , y , z x,y,zx,y,z 方向的偏置，单位为米。 rpy (optional: defaults to identity if not specified) 表示坐标轴在RPY方向上的旋转，单位为弧度。 \\ （必需） 可视化对象的形状，可以是下面的其中一种： \\ 矩形，元素包含长、宽、高。原点在中心。 \\ 圆柱体，元素包含半径、长度。原点中心。 \\ 球体，元素包含半径。原点在中心。 \\ 网格，由文件决定，同时提供 scale ，用于界定其边界。推荐使用 Collada .dae 文件， 也支持.stl文件，但必须为一个本地文件。 \\ (可选) 连杆的碰撞属性。碰撞属性和连杆的可视化属性不同，简单的碰撞模型经常用来简化计算。同一个连杆可以有多个碰撞属性标签，连杆的碰撞属性表示由其定义的几何图形集构成。 \\ (可选) 指定连杆几何形状的名称 \\ (可选，defaults to identity if not specified) 碰撞组件的参考坐标系相对于连杆坐标系的参考坐标系。 xyz (可选， 默认零向量) 表示x , y , z x,y,zx,y,z 方向的偏置，单位为米。 rpy (可选， defaults to identity if not specified) 表示坐标轴在RPY方向上的旋转，单位为弧度。 \\ 与上述geometry元素描述相同 详细元素以及各个元素的作用可以前往官方文档进行查看 8.3 joint部分 joint部分描述了关节的运动学和动力学，并指定了关节的安全限值。 8.3.1 joint的属性： name：指定关节的唯一名称 type：指定关节的类型，其中类型可以是下列类型之一： revolute - 沿轴线旋转的铰链接头，其范围由上限和下限指定。 连续 - 一种连续铰链接头，围绕轴旋转，没有上限和下限。 棱柱形 - 沿轴滑动的滑动接头，其范围由上限和下限指定。 固定 - 这不是真正的关节，因为它不能移动。所有自由度都被锁定。这种类型的接头不需要轴，校准，动力学，极限或safety_controller。 浮动 - 此接头允许所有 6 个自由度的运动。 平面 - 此接头允许在垂直于轴的平面上运动。 8.3.2 joint的元素 \\ (可选，defaults to identity if not specified) 从parent link到child link的变换，joint位于child link的原点，修改该参数可以调整连杆的位置，可用在调整实际模型与理论模型误差，但不建议大幅度修改，因为该参数影响连杆stl的位置，容易影响碰撞检测效果。 xyz (可选: 默认为零向量) 代表x , y , z x,y,zx,y,z轴方向上的偏移，单位米。 rpy (可选: 默认为零向量) 代表绕着固定轴旋转的角度：roll绕着x轴,pitch绕着y轴，yaw绕着z轴，用弧度表示。 \\ (必需) parent link的名字是一个强制的属性。 link parent link的名字，是这个link在机器人结构树中的名字。 \\ (必需) child link的名字是一个强制的属性。 link child link的名字，是这个link在机器人结构树中的名字。 \\(可选: 默认为(1,0,0)) joint的axis轴在joint的坐标系中。这是旋转轴(revolute joint)，prismatic joint移动的轴，是planar joint的标准平面。这个轴在joint坐标系中被指定。修改该参数可以调整关节的旋转所绕着的轴，常用于调整旋转方向，若模型旋向与实际相反，只需乘-1即可。固定(fixed)和浮动(floating)类型的joint不需要用到这个元素。 xyz(必需) 代表轴向量的x , y , z x,y,zx,y,z分量，为标准化的向量。 \\ (可选) joint的参考点，用来矫正joint的绝对位置。 rising (可选) 当joint正向运动时，参考点会触发一个上升沿。 falling (可选) 当joint正向运动时，参考点会触发一个下降沿。 \\(可选) 该元素用来指定joint的物理性能。它的值被用来描述joint的建模性能，尤其是在仿真的时候。 \\ (当关节为旋转或移动关节时为必需) 该元素为关节运动学约束。 lower (可选, 默认为0) 指定joint运动范围下界的属性(revolute joint的单位为弧度，prismatic joint的单位为米)，连续型的joint忽略该属性。 upper (可选, 默认为0) 指定joint运动范围上界的属性(revolute joint的单位为弧度，prismatic joint的单位为米)，连续型的joint忽略该属性。 effort (必需) 该属性指定了joint运行时的最大的力。 velocity (required) 该属性指定了joint运行时的最大的速度。 详细元素以及各个元素的作用可以前往 文档 进行查看 ← 上一页 | 下一页 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/4_communication.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.2-DevelopmentAndUseBasedOnROS1/4_communication.html","title":"ROS架构和通信","keywords":"","body":"通信 我们的MyarmM750主要是采用的是 话题（Topic） 的方式进行通信 话题（Topic）是ROS最常用的通信机制之一、它基于发布者-订阅者模式，其中一个节点作为发布者（Publisher）发布消息，而其他节点作为订阅者（Subscriber）接收消息。发布者可以同时向多个订阅者发布消息，而订阅者可以从多个发布者接收消息。这种方式非常适用于需要实时数据更新的情况，例如传感器数据的处理和实时控制。 首先在.py文件中创建一个Publisher，将我们的消息发布给MyarmM750 接下来在工作空间打开终端,启动ROS： roscore 再新建一个终端，输入： soure devel/setup.bashroslaunch myarm_m read_control.launch 打开rviz后再启动我们的 read_control.py 文件 最后我们再打开一个新终端，输入： rqt_graph 我们能看到节点的所有信息 MyarmM750是处于可以用手控制其运动的状态 ← 上一页 | 下一节 → "},"4-FunctionsAndApplications/6-SDKDevelopment/5.4-DevelopmentBasedOnCommunicationProtocolPackage/5.4.1-CommunicationDoc.html":{"url":"4-FunctionsAndApplications/6-SDKDevelopment/5.4-DevelopmentBasedOnCommunicationProtocolPackage/5.4.1-CommunicationDoc.html","title":"6.4 基于通信协议包开发","keywords":"","body":"通信和信息命令 注意： 在通过通信协议直接通信之前，需要在 M5Stack-basic 上烧录 \"Transponder\"，并在 Atom 上烧录最新的 atomMain。 请详细阅读接口协议文档，并在测试后继续程序开发。 1 USB 通信设置 确保准备好以下设置： 主线接口：USB Type-C 连接电脑和基本 波特率: 115200 数据位: 8 奇偶校验位: none 停止位: 1 2 指令帧简介 & 指导 主 PC 通过 M5Stakc-basic 向外围 PC 传输数据。外围 PC 将数据解码为带有返回值的命令，然后在 500 毫秒内将结果发送回主 PC。 3 信息命令的发送和接收格式 发送和接收都应以十六进制表示。每条命令应包含 5 个部分，如下所示。第 3 和第 4 部分可以留空。 1 命令引脚：0xFE 0xFE 不变 不可或缺 2 有效长度: 总长度包括针脚、序列号、功能代码和端点 不可或缺 3 序列号：00 ~ 8F 已开发指令的相应数量 可以留空。 4 功能代码 以目标为导向 可以留空。 5 结束： 0XFA 不变 不可或缺 4 命令解释 主 PC 通过 M5Stakc-basic 向外围 PC 传输数据。外围 PC 将数据解码为带有返回值的命令，然后在 500 毫秒内将结果发送回主 PC。 类型 数据 长度 功能 指令框架 开始位： 0 1 起始帧识别，0XFE 开始位： 1 1 起始帧识别，0XFE 位数据长度 1 不同的命令对应不同的数据长度 指令位 1 取决于不同的命令 指令框架 数据 0-16 命令与数据，取决于不同的命令 结束框架 结束位 1 停止位，0XFA 5 单一指令命令说明 开机 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 指令帧 0X10 Data[4] 结束帧 0XFA 示例: 串口传输：FE FE 02 10 FA 无返回值 功率下降和连接中断 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 指令帧 0X11 Data[4] 结束帧 0XFA 示例: 串口传输：FE FE 02 11 FA 无返回值 检查 Atom 的状态 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 指令帧 0X12 Data[4] 结束帧 0XFA 示例: 串口传输：FE FE 02 12 FA 返回值：数据结构 数据域 说明 数据 Data[0] 返回值：识别帧 0XFE Data[1] 返回值：识别帧 0XFE Data[2] 返回值：识别帧 0X03 Data[3] 返回值：命令帧 0X12 Data[4] 开机/关机 0X01/0X00 Data[5] 结束帧 0XFA 示例: 假设 Atom 已接通电源： 端口返回：fe fe 03 12 01 fa 关节使能 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X13 Data[4] 舵机序列号 1~6/254 Data[5] 开启/关闭 0X01/0X00 Data[6] 结束帧 0XFA 示例: 串口传输：FE FE 02 13 FA 无返回值 获取机器人错误状态 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X15 Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 15 FA 返回值：数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X12 Data[3] 返回值: 命令帧 0X15 Data[4] 返回值: 电机1错误值高位 servo1_high Data[5] 返回值: 电机1错误值低位 servo1_low Data[6] 返回值: 电机2错误值高位 servo2_high Data[7] 返回值: 电机2错误值低位 servo2_low Data[8] 返回值: 电机3错误值高位 servo3_high Data[9] 返回值: 电机3错误值低位 servo3_low Data[10] 返回值: 电机4错误值高位 servo4_high Data[11] 返回值: 电机4错误值低位 servo4_low Data[12] 返回值: 电机5错误值高位 servo5_high Data[13] 返回值: 电机5错误值低位 servo5_low Data[14] 返回值: 电机6错误值高位 servo6_high Data[15] 返回值: 电机6错误值低位 servo6_low Data[16] 返回值: 电机7错误值高位 servo7_high Data[17] 返回值: 电机7错误值低位 servo7_low Data[18] 返回值: 电机8错误值高位 servo8_high Data[19] 返回值: 电机8错误值低位 servo8_low Data[20] 结束帧 0XFA 示例: 假设 Atom 已成功连接： 端口返回：fe fe fe 12 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 fa 清除机器人异常 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X16 Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 16 FA 读取接收指令队列总长度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X17 Data[4] 结束帧 0XFA 示例: 端口返回：FE FE 03 17 03 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X03 Data[3] 命令帧 0X17 Data[4] 接收指令队列总长度 0X03 Data[5] 结束帧 0XFA 设置接收指令队列总长度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0X18 Data[4] 队列总长度 0X10 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 03 18 10 FA 清除接收指令队列 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X19 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 02 19 FA 读取接收队列当前长度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X08 Data[4] 结束帧 0XFA 示例: 端口返回：FE FE 03 08 03 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X03 Data[3] 命令帧 0X08 Data[4] 接收指令队列总长度 0X03 Data[5] 结束帧 0XFA 读取单关节角度（读取走位信息） 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0X1c Data[4] 关节序列号 0X01 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 03 1c 01 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 起始帧 0XFE Data[1] 返回值: 起始帧 0XFE Data[2] 返回值: 数据长度帧 0X05 Data[3] 返回值: 命令帧 0X1c Data[4] 舵机序列号 0X01 Data[5] 舵机角度高位 Angle_high Data[6] 舵机角度低位 Angle_low Data[7] 结束帧 0XFA 示例: 返回值 of port: FE FE 05 1c 01 00 8C FA temp = angle_low+angle_high*256 Angle=（temp \\ 33000 ?(temp – 65536) : temp）/100 解释：如果 temp 大于 33000，则 temp 减去 65536，然后除以 100；如果 temp 小于 33000，则 temp 直接除以 100。 读取角度（读取走位信息） 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X20 Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 20 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 起始帧 0XFE Data[1] 返回值: 起始帧 0XFE Data[2] 返回值: 数据长度帧 0X0A Data[3] 返回值: 命令帧 0X20 Data[4] 1 号舵机角度高位 Angle1_high Data[5] 1 号舵机角度低位 Angle1_low Data[6] 2 号舵机角度高位 Angle2_high Data[7] 2 号舵机角度低位 Angle2_low Data[8] 3 号舵机角度高位 Angle3_high Data[9] 3 号舵机角度低位 Angle3_low Data[10] 4 号舵机角度高位 Angle4_high Data[11] 4 号舵机角度低位 Angle4_low Data[12] 5 号舵机角度高位 Angle5_high Data[13] 5 号舵机角度低位 Angle5_low Data[14] 6 号舵机角度高位 Angle6_high Data[15] 6 号舵机角度低位 Angle6_low Data[16] 7 号舵机角度高位 Angle7_high Data[17] 7 号舵机角度低位 Angle7_low Data[18] 结束帧 0XFA 示例: 返回值 of port: FE FE 0E 20 00 8C 00 3D FF E6 FF 3F 00 AF FF 51 00 3B 00 4F FA 如何获取关节角度 1： temp = angle1_low+angle1_high*256 Angle1=（temp \\ 33000 ?(temp – 65536) : temp）/100 解释：如果 temp 大于 33000，则 temp 减去 65536，然后除以 100；如果 temp 小于 33000，则 temp 直接除以 100。 其他关节角度的计算方法与此类似。 发送角度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X06 Data[3] 命令帧 0X21 Data[4] 舵机序列号 joint_no Data[5] 高角度 angle_high Data[6] 低角度 angle_low Data[7] 指定速度 sp Data[8] 结束帧 0XFA 示例: 让 1 号舵机移动到零位 串口传输: FE FE 06 21 01 00 00 14 FA 关节号：1-7 angle_high： byte 计算方法：角度值乘以 100 并转换为积分形式，得到十六进制高字节 angle_low: byte 计算方法：角度值乘以 100 并转换为积分形式，得到十六进制低字节 无返回值 发送所有角度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X11 Data[3] 命令帧 0X22 Data[4] 1 号舵机角度高位 Angle1_high Data[5] 1 号舵机角度低位 Angle1_low Data[6] 2 号舵机角度高位 Angle2_high Data[7] 2 号舵机角度低位 Angle2_low Data[8] 3 号舵机角度高位 Angle3_high Data[9] 3 号舵机角度低位 Angle3_low Data[10] 4 号舵机角度高位 Angle4_high Data[11] 4 号舵机角度低位 Angle4_low Data[12] 5 号舵机角度高位 Angle5_high Data[13] 5 号舵机角度低位 Angle5_low Data[14] 6 号舵机角度高位 Angle6_high Data[15] 6 号舵机角度低位 Angle6_low Data[16] 7 号舵机角度高位 Angle7_high Data[17] 7 号舵机角度低位 Angle7_low Data[18] 指定速度 Sp Data[19] 结束帧 0XFA 示例: 向整个关节发送 0 角度，让舵机移动到零位。 串口传输: FE FE 0F 22 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1E FA angle1_high: byte 计算方法：角度值乘以 100 并转换为积分形式，得到十六进制高字节 angle1_low: byte 计算方法：角度值乘以 100 并转换为积分形式，得到十六进制低字节 其他角度的计算方法与此类似。 no 返回值 机器人停止运动 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X29 Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 26 FA 无返回值 移动检查 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X2B Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 2B FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 帧头 0XFE Data[1] 返回值: 帧头 0XFE Data[2] 返回值: 数据长度帧 0X03 Data[3] 返回值: 命令帧 0X2B Data[4] 运动/不运动 0X01/0X00 Data[5] 结束帧 0XFA 示例: 假设程序正在运行： port 返回值: FE FE 03 2B 01 FA 发送电位值 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X05 Data[3] 命令帧 0X3A Data[4] 舵机序列号 Joint Data[5] 电位值高位 Encoder_high Data[6] 电位值低位 Encoder_low Data[7] 结束帧 0XFA 示例: 将 5 号关节设置为 2048 电位 串口传输: FE FE 05 3A 05 08 00 FA 关节序号从 0 到 5 Joint 的数据类型：byte Encoder_high 的数据类型：byte 计算方法：获取电位值高位（十六进制形式） Encoder_low 的数据类型：byte 计算方法：获取电位值低位（十六进制形式） 无返回值 获取电位值 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0X3B Data[4] 关节序号 joint Data[5] 结束帧 0XFA 示例: 获取 NO.2 舵机的潜力 joint_no 取值范围：1-7 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0X3B Data[4] 舵机电位值高位 Encoder_high Data[5] 舵机电位值低位 Encoders_low Data[6] 结束帧 0XFA 示例: 串口传输: FE FE 04 3B 08 07 FA 如何计算电位值： 电位值 = 电位值低位 + 电位值高位 * 256 发送七个舵机的电位值 2\\3舵机方向相反，非2048零位时，需要比如2号：1800；那么3号需要为2296 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X13 Data[3] 命令帧 0X3C Data[4] 1 号舵机的高字节 encoder_1_high Data[5] 1 号舵机的低字节 encoder_1_low Data[6] 2 号舵机的高字节 encoder_2_high Data[7] 2 号舵机的低字节 encoder_2_low Data[8] 3 号舵机的高字节 encoder_3_high Data[9] 3 号舵机的低字节 encoder_3_low Data[10] 4 号舵机的高字节 encoder_4_high Data[11] 4 号舵机的低字节 encoder_4_low Data[12] 5 号舵机的高字节 encoder_5_high Data[13] 5 号舵机的低字节 encoder_5_low Data[14] 6 号舵机的高字节 encoder_6_high Data[15] 6 号舵机的低字节 encoder_6_low Data[16] 7 号舵机的高字节 encoder_7_high Data[17] 7 号舵机的低字节 encoder_7_low Data[18] 8 号舵机的高字节 encoder_8_high Data[19] 8 号舵机的低字节 encoder_8_low Data[20] 指定速度 Sp Data[21] 结束帧 0XFA 示例: 发送所有电机的电位值均为 2048，速度为 20 串口传输: FE FE 13 3C 08 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00 14 FA 参考上方发送单独电位值 encoder_1_high 的数据类型: byte 计算方法：将 1 号舵机的电位转换为积分形式，得到高字节十六进制数 encoder_1_low 的数据类型: byte 计算方法：将 1 号舵机的电位转换为积分形式，得到低字节十六进制数 sp: 字节数据类型，范围为 0 至 100 无返回值 发送七个舵机的电位值 2\\3舵机方向相反，非2048零位时，需要比如2号：1800；那么3号需要为2296 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X22 Data[3] 命令帧 0X3E Data[4] 1 号舵机的高字节 encoder_1_high Data[5] 1 号舵机的低字节 encoder_1_low Data[6] 2 号舵机的高字节 encoder_2_high Data[7] 2 号舵机的低字节 encoder_2_low Data[8] 3 号舵机的高字节 encoder_3_high Data[9] 3 号舵机的低字节 encoder_3_low Data[10] 4 号舵机的高字节 encoder_4_high Data[11] 4 号舵机的低字节 encoder_4_low Data[12] 5 号舵机的高字节 encoder_5_high Data[13] 5 号舵机的低字节 encoder_5_low Data[14] 6 号舵机的高字节 encoder_6_high Data[15] 6 号舵机的低字节 encoder_6_low Data[16] 7 号舵机的高字节 encoder_7_high Data[17] 7 号舵机的低字节 encoder_7_low Data[18] 8 号舵机的高字节 encoder_8_high Data[19] 8 号舵机的低字节 encoder_8_low Data[20] 1号舵机指定速度 Sp Data[21] 2号舵机指定速度 Sp Data[22] 3号舵机指定速度 Sp Data[23] 4号舵机指定速度 Sp Data[24] 5号舵机指定速度 Sp Data[25] 6号舵机指定速度 Sp Data[26] 7号舵机指定速度 Sp Data[27] 8号舵机指定速度 Sp Data[28] 结束帧 0XFA 示例: 发送所有电机的电位值均为 2048，速度为 20 串口传输: FE FE 22 3E 08 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00 14 14 14 14 14 14 14 14 FA 参考上方发送单独电位值 encoder_1_high 的数据类型: byte 计算方法：将 1 号舵机的电位转换为积分形式，得到高字节十六进制数 encoder_1_low 的数据类型: byte 计算方法：将 1 号舵机的电位转换为积分形式，得到低字节十六进制数 sp: 字节数据类型，范围为 0 至 100 无返回值 读取七个舵机的电位值 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X3D Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 3D FA 返回值: 数据结构 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X12 Data[3] 命令帧 0X3D Data[4] 1 号舵机电位值的高字节 encoder_1_high Data[5] 1 号舵机电位值的低字节 encoder_1_low Data[6] 2 号舵机电位值的高字节 encoder_2_high Data[7] 2 号舵机电位值的低字节 encoder_2_low Data[8] 3 号舵机电位值的高字节 encoder_3_high Data[9] 3 号舵机电位值的低字节 encoder_3_low Data[10] 4 号舵机电位值的高字节 encoder_4_high Data[11] 4 号舵机电位值的低字节 encoder_4_low Data[12] 5 号舵机电位值的高字节 encoder_5_high Data[13] 5 号舵机电位值的低字节 encoder_5_low Data[14] 6 号舵机电位值的高字节 encoder_6_high Data[15] 6 号舵机电位值的低字节 encoder_6_low Data[16] 5 号舵机的高字节 encoder_7_high Data[17] 5 号舵机的低字节 encoder_7_low Data[18] 6 号舵机的高字节 encoder_8_high Data[19] 6 号舵机的低字节 encoder_8_low Data[20] 结束帧 0XFA 示例: 假设当前机械臂各关节都处于 0 位 串口返回值: FE FE 12 3D 08 00 08 00 08 00 08 00 08 00 08 00 FA 如何计算电位值 电位值 = 电位值低位 + 电位值高位 * 256 读取速度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0XE1 Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 E1 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0XE1 Data[4] specified speed Sp Data[5] 结束帧 0XFA 示例: 假设速度为 50 port 返回值: FE FE 03 E1 32 FA 读取所有关节的最小角度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X4A Data[4] 结束帧 0XFA 示例: 串口传输: FE FE 02 4A FA joint_no 取值范围：1-7 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X0A Data[3] 返回值: 命令帧 0X4A Data[4] 关节1角度值高位 Angle_high Data[5] 关节1角度值低位 Angle_low Data[6] 关节2角度值高位 Angle_high Data[7] 关节2角度值低位 Angle_low Data[8] 关节3角度值高位 Angle_high Data[9] 关节3角度值低位 Angle_low Data[10] 关节4角度值高位 Angle_high Data[11] 关节4角度值低位 Angle_low Data[12] 关节5角度值高位 Angle_high Data[13] 关节5角度值低位 Angle_low Data[14] 关节6角度值高位 Angle_high Data[15] 关节6角度值低位 Angle_low Data[16] 关节7角度值高位 Angle_high Data[17] 关节7角度值低位 Angle_low Data[18] 结束帧 0XFA 示例: port 返回值: FE FE 0A 4A F9 F2 F9 F2 F9 F2 F9 F2 F9 F2 F9 F2 F9 F2 FA 如何得出关节最小角度 temp = angle1_low+angle1_high*256 Angle1=（temp \\ 33000 ?(temp – 65536) : temp）/10 计算方式：角度值低位 + 角度高位值乘以 256 先判断是否大于 33000 如果大于 33000 就再减去 65536 最后除以 10 如果小于 33000 就直接除以 10 读取所有关节的最大角度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X4B Data[4] 结束帧 0XFA joint_no 取值范围：1-7 示例: 串口传输: FE FE 02 4B FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X0A Data[3] 返回值: 命令帧 0X4B Data[4] 关节1角度值高位 Angle_high Data[5] 关节1角度值低位 Angle_low Data[6] 关节2角度值高位 Angle_high Data[7] 关节2角度值低位 Angle_low Data[8] 关节3角度值高位 Angle_high Data[9] 关节3角度值低位 Angle_low Data[10] 关节4角度值高位 Angle_high Data[11] 关节4角度值低位 Angle_low Data[12] 关节5角度值高位 Angle_high Data[13] 关节5角度值低位 Angle_low Data[14] 关节6角度值高位 Angle_high Data[15] 关节6角度值低位 Angle_low Data[16] 关节7角度值高位 Angle_high Data[17] 关节7角度值低位 Angle_low Data[18] 结束帧 0XFA 示例: port 返回值: FE FE 0A 4B F9 F2 F9 F2 F9 F2 F9 F2 F9 F2 F9 F2 F9 F2 FA 如何得出关节最大角度 temp = angle1_low+angle1_high*256 Angle1=（temp \\ 33000 ?(temp – 65536) : temp）/10 计算方式：角度值低位 + 角度高位值乘以 256 先判断是否大于 33000 如果大于 33000 就再减去 65536 最后除以 10 如果小于 33000 就直接除以 10 设置关节最大角度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X05 Data[3] 命令帧 0X4D Data[4] 关节舵机序号 Joint_number Data[5] highbyte of steering gear Angle_high Data[6] lowbyte of steering gear Angle_low Data[7] 结束帧 0XFA 示例: 设置 2 号关节最大角度为 45 joint_no 取值范围：1-7 port 返回值: FE FE 03 41 32 FA angle1_high：数据类型 byte 计算方式：舵机角度值乘以 100 先转换成 int 形式 再取十六进制的高字节 angle1_low：数据类型 byte 计算方式：舵机角度值乘以 100 先转换成 int 形式 再取十六进制的低字节 串口传输: FE FE 05 4C 02 11 94 FA 无返回值 查看舵机是否全部上电 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X51 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 02 51 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X03 Data[3] 返回值: 命令帧 0X51 Data[4] power on/off 0X01/0X00 Data[5] 结束帧 0XFA 示例: 全部舵机已上电 串口返回值: FE FE 03 51 01 FA 获取所有伺服电机的温度 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0XE5 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 02 E5 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X0A Data[3] 返回值: 命令帧 0XE5 Data[4] 电机1温度 servo1_temp Data[5] 电机2温度 servo2_temp Data[6] 电机3温度 servo3_temp Data[7] 电机4温度 servo4_temp Data[8] 电机5温度 servo5_temp Data[9] 电机6温度 servo6_temp Data[10] 电机7温度 servo7_temp Data[11] 电机8温度 servo8_temp Data[12] 结束帧 0XFA 示例: 串口返回值: FE FE 0A E5 14 14 14 14 14 14 14 14 FA 获取所有伺服电机的电压 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0XE3 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 02 E3 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X0A Data[3] 返回值: 命令帧 0XE3 Data[4] 电机1电压 servo1_vol Data[5] 电机2电压 servo2_vol Data[6] 电机3电压 servo3_vol Data[7] 电机4电压 servo4_vol Data[8] 电机5电压 servo5_vol Data[9] 电机6电压 servo6_vol Data[10] 电机7电压 servo7_vol Data[11] 电机8电压 servo8_vol Data[12] 结束帧 0XFA 示例: 串口返回值: FE FE 0A E5 00 00 00 00 00 00 00 00 FA 获取所有伺服电机的电流 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0XE2 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 02 E2 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X12 Data[3] 返回值: 命令帧 0XE2 Data[4] 电机1温度 servo1_current_high Data[5] 电机1温度 servo1_current_low Data[6] 电机2温度 servo2_current_high Data[7] 电机2温度 servo2_current_low Data[8] 电机3温度 servo3_current_high Data[9] 电机3温度 servo3_current_low Data[10] 电机4温度 servo4_current_high Data[11] 电机4温度 servo4_current_low Data[12] 电机5温度 servo5_current_high Data[13] 电机5温度 servo5_current_low Data[14] 电机6温度 servo6_current_high Data[15] 电机6温度 servo6_current_low Data[16] 电机7温度 servo7_current_high Data[17] 电机7温度 servo7_current_low Data[18] 电机8温度 servo8_current_high Data[19] 电机8温度 servo8_current_low Data[20] 结束帧 0XFA 示例: 串口返回值: FE FE 12 E2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FA 获取所有伺服电机的所有状态 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0XE4 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 02 E3 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X0A Data[3] 返回值: 命令帧 0XE4 Data[4] 电机1电压 servo1_status Data[5] 电机2电压 servo2_status Data[6] 电机3电压 servo3_status Data[7] 电机4电压 servo4_status Data[8] 电机5电压 servo5_status Data[9] 电机6电压 servo6_status Data[10] 电机7电压 servo7_status Data[11] 电机8电压 servo8_status Data[12] 结束帧 0XFA 示例: 串口返回值: FE FE 0A E4 00 00 00 00 00 00 00 00 FA 获取所有伺服电机保护电流 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0XE6 Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 02 E6 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X12 Data[3] 返回值: 命令帧 0XE6 Data[4] 电机1温度 servo1_protect_current_high Data[5] 电机1温度 servo1_protect_current_low Data[6] 电机2温度 servo2_protect_current_high Data[7] 电机2温度 servo2_protect_current_low Data[8] 电机3温度 servo3_protect_current_high Data[9] 电机3温度 servo3_protect_current_low Data[10] 电机4温度 servo4_protect_current_high Data[11] 电机4温度 servo4_protect_current_low Data[12] 电机5温度 servo5_protect_current_high Data[13] 电机5温度 servo5_protect_current_low Data[14] 电机6温度 servo6_protect_current_high Data[15] 电机6温度 servo6_protect_current_low Data[16] 电机7温度 servo7_protect_current_high Data[17] 电机7温度 servo7_protect_current_low Data[18] 电机8温度 servo8_protect_current_high Data[19] 电机8温度 servo8_protect_current_low Data[20] 结束帧 0XFA 示例: 串口返回值: FE FE 12 E6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FA 设置电机使能 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X13 Data[4] 舵机序号 servo_no Data[6] 使能/掉使能 0X01/0X00 Data[6] 结束帧 0XFA 示例: 使能一号舵机 串口传输: FE FE 04 13 01 01 FA servo_no 取值范围：1-8 无返回值 设置舵机零点 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0X54 Data[4] 关节舵机序号 servo_no Data[5] 结束帧 0XFA 示例: 设置 1 号舵机的零位 串口传输: FE FE 03 54 01 FA servo_no 取值范围：1-8 无返回值 设置指定伺服电机的位置环P比例系数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X70 Data[4] 舵机序号 servo_no Data[5] 舵机序号 data Data[6] 结束帧 0XFA 示例: 串口传输: FE FE 04 70 01 01 FA servo_no 取值范围：1-8 无返回值 设置指定伺服电机的位置环D比例系数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X71 Data[4] 舵机序号 servo_no Data[5] 舵机序号 data Data[6] 结束帧 0XFA 示例: 串口传输: FE FE 04 71 01 01 FA servo_no 取值范围：1-8 无返回值 设置指定伺服电机的位置环I比例系数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X72 Data[4] 舵机序号 servo_no Data[5] 舵机序号 data Data[6] 结束帧 0XFA 示例: 串口传输: FE FE 04 72 01 01 FA servo_no 取值范围：1-8 无返回值 读取指定伺服电机的位置环P比例系数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0XE7 Data[4] 电机序号 servo_no Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 03 E7 01 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0XE7 Data[4] 电机序号 servo_no Data[5] 位置环P比例系数 P Data[6] 结束帧 0XFA 示例: 串口返回值: FE FE 04 E7 01 01 FA 读取指定伺服电机的位置环D比例系数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0XE8 Data[4] 电机序号 servo_no Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 03 E8 01 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0XE8 Data[4] 电机序号 servo_no Data[5] 位置环P比例系数 D Data[6] 结束帧 0XFA 示例: 串口返回值: FE FE 04 E8 01 01 FA 读取指定伺服电机的位置环I比例系数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0XE9 Data[4] 电机序号 servo_no Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 03 E9 01 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0XE7 Data[4] 电机序号 servo_no Data[5] 位置环P比例系数 I Data[6] 结束帧 0XFA 示例: 串口返回值: FE FE 04 E9 01 01 FA 设置指定伺服电机的编码器顺时针不灵敏区 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X73 Data[4] 舵机序号 servo_no Data[5] 顺时针不灵敏区值 data Data[6] 结束帧 0XFA 示例: 串口传输: FE FE 04 73 01 01 FA servo_no 取值范围：1-8 data 取值范围：0-32 无返回值 读取指定伺服电机的编码器顺时针不灵敏区 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0XEA Data[4] 电机序号 servo_no Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 03 E7 01 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0XEA Data[4] 电机序号 servo_no Data[5] 顺时针不灵敏区值 data Data[6] 结束帧 0XFA 示例: 串口返回值: FE FE 04 EA 01 01 FA 设置指定伺服电机的编码器逆时针不灵敏区 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X74 Data[4] 舵机序号 servo_no Data[5] 逆时针不灵敏区值 data Data[6] 结束帧 0XFA 示例: 串口传输: FE FE 04 74 01 01 FA servo_no 取值范围：1-8 data 取值范围：0-32 无返回值 读取指定伺服电机的编码器逆时针不灵敏区 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0XEB Data[4] 电机序号 servo_no Data[5] 结束帧 0XFA 示例: 串口传输: FE FE 03 EB 01 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0XEB Data[4] 电机序号 servo_no Data[5] 逆时针不灵敏区值 data Data[6] 结束帧 0XFA 示例: 串口返回值: FE FE 04 EB 01 01 FA 读取舵机参数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X05 Data[3] 命令帧 0X53 Data[4] 关节舵机序号 Joint_number Data[5] 数据地址 data_id Data[5] 读取长度 data_len Data[6] 结束帧 0XFA 示例: 读取 1 号舵机位置 P 比例参数 串口传输: FE FE 03 53 01 15 02 FA joint_no 取值范围：1-8 data_len :1/2 1字节/2字节 Data_id: 数据类型 byte，取值如下表 地址 功能 取值范围 初始值 取值解析 20 LED 报警 0-254 0 1/0：打开/关闭 LED 警报器 21 位置环 P 0-254 10 控制电机的比例系数 22 位置环 I 0-254 0 控制电机的微分系数 23 位置环 D 0-254 1 控制电机的积分系数 24 最小启动力 0-1000 0 设置最小输出力矩 1000 = 100% 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X03 Data[3] 返回值: 命令帧 0X53 Data[5] 数据地址 data_id Data[5] 返回值: data data_high Data[4] 返回值: data data_low Data[5] 结束帧 0XFA 设置舵机伺服参数 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X05 Data[3] 命令帧 0X52 Data[4] 关节舵机序号 Joint_no Data[5] 数据地址 data_id Data[5] 数据高位 data_high Data[5] 数据低位 data_low Data[6] 结束帧 0XFA 示例: 设置 1 号舵机位置 P 比例参数为 1 串口传输: FE FE 05 52 01 15 00 01 FA joint_no 取值范围：1-8 无返回值 Data_id：数据类型 byte，具体值见下图： 地址 功能 取值范围 初始值 取值解析 20 LED 报警 0-254 0 1/0：打开/关闭 LED 警报器 21 位置环 P 0-254 10 控制电机的比例系数 22 位置环 I 0-254 0 控制电机的微分系数 23 位置环 D 0-254 1 控制电机的积分系数 24 最小启动力 0-1000 0 设置最小输出力矩 1000 = 100% 设置 Atom 模式 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X60 Data[4] 引脚序号 pin_no Data[5] 输入/输出 00X00/00X01 Data[6] 结束帧 0XFA 示例: 设置 atom pin22 为输入模式 串口传输: FE FE 04 60 16 00 FA Pin_no: 数据类型 byte Pin_mode：0/1 无返回值 设置 Atom IO(setDigitalOutput) 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X61 Data[4] 引脚序号 pin_no Data[5] 电平信号 0X00/0X01 Data[6] 结束帧 0XFA 示例: 设置引脚 P2 为高电平 串口传输: FE FE 04 61 02 01 FA pin_no：1/2 无返回值 读取 Atom IO(getDigitalInput) 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0X62 Data[4] 引脚序号 pin_no Data[5] 结束帧 0XFA 示例: 读取引脚 P2 的电平信号 串口传输: FE FE 03 62 02 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X03 Data[3] 返回值: 命令帧 0X53 Data[4] 引脚序号 pin_no Data[5] 电平信号 0X00/0X01 Data[6] 结束帧 0XFA 示例: 假设引脚 P2 为高电平 Port 返回值: FE FE 04 62 02 01 FA 设置主控 IO 输出 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0X65 Data[4] 引脚序号 Pin_no Data[5] 电平信号 0X00/0X01 Data[4] 结束帧 0XFA 示例: 设置引脚 2 输出高电平 串口传输: FE FE 04 65 02 01 FA 读取主控 IO 输出 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0X66 Data[4] 引脚序号 Pin_no Data[4] 结束帧 0XFA 串口传输: FE FE 03 66 02 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0X66 Data[4] 引脚序号 Pin_no Data[5] 电平信号 0X00/0X01 Data[6] 结束帧 0XFA 示例: 假设引脚 2 为高电平 Port 返回值: FE FE 04 66 02 01 FA 设定 atom 屏幕 RGB 灯的颜色 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X05 Data[3] 命令帧 0X6A Data[4] R 0X00/0XFF Data[5] G 0X00/0XFF Data[6] B 0X00/0XFF Data[7] 结束帧 0XFA 示例: 设置 RGB 为蓝色 串口传输: FE FE 05 6A 00 00 FF FA 无返回值 读取末端led按下状态 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X02 Data[3] 命令帧 0X6B Data[4] 结束帧 0XFA 串口传输: FE FE 02 6B FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X03 Data[3] 返回值: 命令帧 0X6B Data[5] 按下/未按下 0X00/0X01 Data[6] 结束帧 0XFA 设置底座 IO 输出 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X04 Data[3] 命令帧 0Xa0 Data[4] 引脚序号 Pin_no Data[5] 电平信号 0X00/0X01 Data[4] 结束帧 0XFA 示例: 设置引脚 2 输出高电平 串口传输: FE FE 04 a0 02 01 FA 读取底座 IO 输出 数据域 说明 数据 Data[0] 识别帧 0XFE Data[1] 识别帧 0XFE Data[2] 数据长度帧 0X03 Data[3] 命令帧 0Xa1 Data[4] 引脚序号 Pin_no Data[4] 结束帧 0XFA 串口传输: FE FE 03 a1 02 FA 返回值: 数据结构 数据域 说明 数据 Data[0] 返回值: 识别帧 0XFE Data[1] 返回值: 识别帧 0XFE Data[2] 返回值: 数据长度帧 0X04 Data[3] 返回值: 命令帧 0Xa1 Data[4] 引脚序号 Pin_no Data[5] 电平信号 0X00/0X01 Data[6] 结束帧 0XFA 示例: 假设引脚 2 为高电平 Port 返回值: FE FE 04 a1 02 01 FA ← 上一章 | 下一章 → "},"4-FunctionsAndApplications/7-SuccessfulCases/7-SuccessfulCases.html":{"url":"4-FunctionsAndApplications/7-SuccessfulCases/7-SuccessfulCases.html","title":"7 成功案例","keywords":"","body":"成功案例 myArm M750 通用型智能化6自由度机器人运动控制验证装置，代表了机器人技术在精确度和灵活性方面的最新进展。 它不仅满足了对高精度机器人运动控制的需求，而且特别适合于入门级机器人运动算法的验证和实践教学场景。其标准化机械臂结构为学生和初学者提供了理想的学习平台，以掌握机器人运动学的基本原理和应用。 myArm M750 机器人执行器（Master） myArm M750致力于实现精确的运动控制与验证，尤其针对那些对操作精度有严格要求的应用场景，如精密装配、细微操纵以及质量监测等，表现出色。 它的额定负载能力为500g，峰值负载可达1kg，搭载了工业级高精度数字伺服电机和领先的控制算法，赋予myArm M750非凡的扭矩控制和精确的位置定位能力，成为实现高度精准机器人运动控制的核心要素。 myArm M750的多功能性，在其末端执行器的设计上显得尤为突出。标配标准的平行夹爪和视觉模块——为用户提供了基本的抓取与识别能力 除此之外，myArm M750还兼容一系列可选配件，这些配件极大地拓宽了该机械臂的应用领域和灵活性。 ← 上一章 | 下一章 → "},"5-SupportAndService/5-SupportAndService.html":{"url":"5-SupportAndService/5-SupportAndService.html","title":"8 关于我们","keywords":"","body":"大象机器人 1. 公司介绍 大象机器人(Elephant Robotics)立足于中国·深圳，是一家专注于机器人研发设计及自动化解决方案的高新科技企业。 我们致力于为机器人教育及科研机构、商业场景、工业生产提供高柔性的协作机器人、简单易学的操作系统以及智能的自动化解决方案。其产品质量及智慧方案备受韩国、日本、美国、德国、意大利、希腊等数家来自世界 500 强名企工厂的一致认可与好评。 大象机器人秉持“Enjoy Robots World”的愿景，倡导人与机器人的协同工作，让机器人成为人类工作生活的好帮手，帮助人们从简单、重复、枯燥的工作中解放出来，充分发挥人机协同优势，进而提高工作效率，帮助人类缔造美好新生活。 未来，大象机器人希望通过新一代尖端科技推动机器人产业发展，携手与客户伙伴们共同开启自动化智能化新时代。 2. 发展历程 2016.08 -----大象机器人有限公司正式成立 2016.08 -----进入 HAX 孵化器，获得 SOSV 种子轮投资 2016.08 ----- 开始研发 Elephant S 工业协作机器人 2017.01 -----获评 “CES 中国最具创新企业 Top10” 2017.04 -----出席汉诺威工业博览会及韩国自动化展览会 2017.07 -----两位创始人入选福布斯亚洲评选的“30 位 30 岁以下商业精英” 2017.10 -----第五代单臂工业协作机器人 Elephant S 问世 2018.04 -----获得”云天使基金”天使轮投资 2018.06 -----首次公开亮相 2018 年汉诺威世界工业博览会 2018.06 -----获得长江商学院“智造创业 MBA 奖” 2018.06 -----获得清华经管“创业加速器 X-elerator 奖” 2018.11 -----获得亚洲智能硬件大赛深圳赛区第二名 2018.11 -----获得高工金球奖“最具投资企业奖” 2019.03 -----获得高工金球奖“领军人物奖” 2019.04 -----2019 年 3 月 Catbot 获“工业机器人创新奖” 2019.09 -----出席华为欧洲生态大会(HCE)，正式成为华为生态伙伴一员 2019.11 -----大象机器人携手哈工大出席 IROS 国际智能机器人与系统大会 2019.12 -----大象机器人-华南理工大学“智能机器人联合开发实验室”正式揭牌 2019.12 -----荣获高工 2019 年度“创新技术奖” 2019.12 -----荣获高工 2019 年度“十大快速成长企业” 2019.12 -----荣获深圳装备工业-工业机器人细分领域-“新锐企业奖” 2019.12 -----世界首款仿生机器猫 MarsCat 问世 2020.05 -----创始人获得 2019 年度深圳市机器人新锐人物奖 2020.10 -----全球最轻最小的六轴协作机器人 myCobot 问世 2021.03 -----面向科研的最小协作机器人 myCobotPro 320 问世 2021.05 -----火星仿生猫 MarsCat 获得新华财经、中国日报、南京日报、哈尔滨日报等多家媒体的竞相报道 2021.07 -----发布最小的复合机器人底盘 – 小象移动机器人 myAGV 2021.09 -----全球首款全包裹式的四轴机械臂-小象码垛机械臂 myPalletizer 问世 3. 相关链接 购买链接 淘宝：https://shop504055678.taobao.com Shopify： https://shop.elephantrobotics.com/ 速卖通：https://elephantrobotics.aliexpress.com/store/1101941423其他信息 官网： https://www.elephantrobotics.com 视频 Bilibili： https://space.bilibili.com/2126215657 Youtube： https://www.youtube.com/c/Elephantrobotics Facebook： https://www.facebook.com/mycobotcreator/ Linkedin： https://www.linkedin.com/company/18319865 X (Twitter)： https://twitter.com/CobotMy Discord： https://discord.gg/2MAherp7nt Hackster： https://www.hackster.io/elephant-robotics 4. 联系我们 我们的工作时间为中国工作日，北京时间上午 10 点至下午 6 点。 如果您有任何其他问题，请通过以下方式联系我们。E-mail : support@elephantrobotics.com - 如果您有购买意向或任何参数问题，请发送电子邮件至此邮箱。 [E-mail](sales@elephantrobotics.com) : sales@elephantrobotics.com 如果列出的问题无法帮助您解决，而您又有更多的售后问题，请向本邮箱发送电子邮件。E-mail : support@elephantrobotics.com 我们将在 1-2 个工作日内给予答复； 微信:我们只为通过微信购买 myArm M&C 系列产品的用户提供一对一服务。 ← 上一章 | 下一章 → "},"6-Acknowledgments/6-Acknowledgments.html":{"url":"6-Acknowledgments/6-Acknowledgments.html","title":"9 致谢","keywords":"","body":"致谢 我们在这里表达我们对所有参与开发、测试和完善 myArm 系列产品（包括 myArm Controller 650、myArm Master 750 以及 M&C 套件）的人员的深深感激。每一个细节的打磨和每一个功能的创新都离不开背后团队的辛勤工作和献身精神。 特别感谢： 研发团队：感谢你们的创新思维和无数个日夜的努力，将复杂的技术转化为用户友好的产品。质量保证与测试团队：你们对每一个细节的严格把控保证了我们产品的可靠性和用户的最终体验。客户支持团队：感谢你们为我们的用户提供专业的支持，帮助他们解决使用过程中的每一个问题。合作伙伴与供应商：你们的支持和服务对产品的成功至关重要。感谢你们的高质量原材料和部件，以及时刻准备支持的态度。投资者和顾问：没有你们的信任和资金支持，我们无法将这些创新带到市场。你们的洞察和指导也一直是我们前进的动力。 用户感谢： 我们特别感谢选择和信任 myArm 系列产品的每一位用户。你们的反馈和建议是我们不断前进和改进的动力。我们承诺将继续倾听你们的声音，不断优化我们的产品和服务。 未来展望： 我们期待与所有的利益相关者一起，继续在机器人技术的道路上探索和进步。让我们携手创造更多的可能，为世界带来更大的便利和创新。 ← 上一章 "}}